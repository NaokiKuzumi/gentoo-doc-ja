# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-02-23 10:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <guide><title>
#: en/articles/bash-by-example-p2.xml:6
#, no-wrap
msgid "Bash by example, Part 2"
msgstr ""

#. type: Content of: <guide><abstract>
#: en/articles/bash-by-example-p2.xml:13
#, no-wrap
msgid ""
"In his introductory article on bash, Daniel Robbins walked you through some of\n"
"the scripting language's basic elements and reasons for using bash. In this, the\n"
"second installment, Daniel picks up where he left off and looks at bash's basic\n"
"constructs like conditional (if-then) statements, looping, and more.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/bash-by-example-p2.xml:28
#, no-wrap
msgid "More bash programming fundamentals"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:30
#, no-wrap
msgid "Accepting arguments"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:34
#, no-wrap
msgid ""
"Let's start with a brief tip on handling command-line arguments, and then look\n"
"at bash's basic programming constructs.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:39
#, no-wrap
msgid ""
"In the sample program in the <uri\n"
"link=\"/doc/en/articles/bash-by-example-p1.xml\">introductory article</uri>, we\n"
"used the environment variable \"$1\", which referred to the first command-line\n"
"argument. Similarly, you can use \"$2\", \"$3\", etc. to refer to the second and\n"
"third arguments passed to your script. Here's an example:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:46
#, no-wrap
msgid "Referring to arguments passed to the script"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:47
#, no-wrap
msgid ""
"#!/usr/bin/env bash\n"
"\n"
"echo name of script is $0\n"
"echo first argument is $1\n"
"echo second argument is $2\n"
"echo seventeenth argument is $17\n"
"echo number of arguments is $#\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:57
#, no-wrap
msgid ""
"The example is self explanatory except for two small details. First, \"$0\" will\n"
"expand to the name of the script, as called from the command line, and \"$#\" will\n"
"expand to the number of arguments passed to the script. Play around with the\n"
"above script, passing different kinds of command-line arguments to get the hang\n"
"of how it works.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:65
#, no-wrap
msgid ""
"Sometimes, it's helpful to refer to all command-line arguments at once. For this\n"
"purpose, bash features the \"$@\" variable, which expands to all command-line\n"
"parameters separated by spaces. We'll see an example of its use when we take a\n"
"look at \"for\" loops, a bit later in this article.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:74
#, no-wrap
msgid "Bash programming constructs"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:78
#, no-wrap
msgid ""
"If you've programmed in a procedural language like C, Pascal, Python, or Perl,\n"
"then you're familiar with standard programming constructs like \"if\" statements,\n"
"\"for\" loops, and the like. Bash has its own versions of most of these standard\n"
"constructs. In the next several sections, I will introduce several bash\n"
"constructs and demonstrate the differences between these constructs and others\n"
"you are already familiar with from other programming languages. If you haven't\n"
"programmed much before, don't worry. I include enough information and examples\n"
"so that you can follow the text.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:91
#, no-wrap
msgid "Conditional love"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:95
#, no-wrap
msgid ""
"If you've ever programmed any file-related code in C, you know that it requires\n"
"a significant amount of effort to see if a particular file is newer than\n"
"another. That's because C doesn't have any built-in syntax for performing such a\n"
"comparison; instead, two stat() calls and two stat structures must be used to\n"
"perform the comparison by hand. In contrast, bash has standard file comparison\n"
"operators built in, so determining if \"<path>/tmp/myfile</path> is readable\" is\n"
"as easy as checking to see if \"<c>$myvar</c> is greater than 4\".\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:105
#, no-wrap
msgid ""
"The following table lists the most frequently used bash comparison operators.\n"
"You'll also find an example of how to use every option correctly. The example is\n"
"meant to be placed immediately after the \"if\". For example:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:110
#, no-wrap
msgid "Bash comparison operator"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:111
#, no-wrap
msgid ""
"if [ -z \"$myvar\" ]\n"
"then\n"
"     echo \"myvar is not defined\"\n"
"fi\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:118
#, no-wrap
msgid ""
"Sometimes, there are several different ways that a particular comparison can be\n"
"made. For example, the following two snippets of code function identically:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:122
#, no-wrap
msgid "Two ways of making comparison"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:123
#, no-wrap
msgid ""
"if [ \"$myvar\" -eq 3 ]\n"
"then \n"
"     echo \"myvar equals 3\"\n"
"fi\n"
"\n"
"if [ \"$myvar\" = \"3\" ]\n"
"then\n"
"     echo \"myvar equals 3\"\n"
"fi\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:135
#, no-wrap
msgid ""
"In the above two comparisons do exactly the same thing, but the first uses\n"
"arithmetic comparison operators, while the second uses string comparison\n"
"operators.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:143
#, no-wrap
msgid "String comparison caveats"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:147
#, no-wrap
msgid ""
"Most of the time, while you can omit the use of double quotes surrounding\n"
"strings and string variables, it's not a good idea. Why? Because your code will\n"
"work perfectly, unless an environment variable happens to have a space or a tab\n"
"in it, in which case bash will get confused. Here's an example of a fouled-up\n"
"comparison:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:154
#, no-wrap
msgid "Fouled-up comparison example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:155
#, no-wrap
msgid ""
"if [ $myvar = \"foo bar oni\" ]\n"
"then\n"
"     echo \"yes\"\n"
"fi\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:162
#, no-wrap
msgid ""
"In the above example, if myvar equals \"foo\", the code will work as expected and\n"
"not print anything. However, if myvar equals \"foo bar oni\", the code will fail\n"
"with the following error:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:167
#, no-wrap
msgid "Error when variable contains spaces"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:168
#, no-wrap
msgid "[: too many arguments\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:172
#, no-wrap
msgid ""
"In this case, the spaces in \"$myvar\" (which equals \"foo bar oni\") end up\n"
"confusing bash. After bash expands \"$myvar\", it ends up with the following\n"
"comparison:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:177
#, no-wrap
msgid "Ending comparison"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:178
#, no-wrap
msgid "[ foo bar oni = \"foo bar oni\" ]\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:182
#, no-wrap
msgid ""
"Because the environment variable wasn't placed inside double quotes, bash thinks\n"
"that you stuffed too many arguments in-between the square brackets. You can\n"
"easily eliminate this problem by surrounding the string arguments with\n"
"double-quotes. Remember, if you get into the habit of surrounding all string\n"
"arguments and environment variables with double-quotes, you'll eliminate many\n"
"similar programming errors. Here's how the \"foo bar oni\" comparison should have\n"
"been written:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:191
#, no-wrap
msgid "Proper way of comparison writing"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:192
#, no-wrap
msgid ""
"if [ \"$myvar\" = \"foo bar oni\" ]\n"
"then\n"
"    echo \"yes\"\n"
"fi\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:199
#, no-wrap
msgid ""
"The above code will work as expected and will not create any unpleasant\n"
"surprises.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><note>
#: en/articles/bash-by-example-p2.xml:204
#, no-wrap
msgid ""
"If you want your environment variables to be expanded, you must enclose them in\n"
"double quotes, rather than single quotes. Single quotes disable variable (as\n"
"well as history) expansion.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:212
#, no-wrap
msgid "Looping constructs: \"for\""
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:216
#, no-wrap
msgid ""
"OK, we've covered conditionals, now it's time to explore bash looping\n"
"constructs. We'll start with the standard \"for\" loop. Here's a basic example:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:220
#, no-wrap
msgid "Basic for example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:221
#, no-wrap
msgid ""
"#!/usr/bin/env bash\n"
"\n"
"for x in one two three four\n"
"do\n"
"    echo number $x\n"
"done\n"
"\n"
"<comment>Output:</comment>\n"
"number one\n"
"number two \n"
"number three \n"
"number four\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:236
#, no-wrap
msgid ""
"What exactly happened? The \"for x\" part of our \"for\" loop defined a new\n"
"environment variable (also called a loop control variable) called \"$x\", which\n"
"was successively set to the values \"one\", \"two\", \"three\", and \"four\". After each\n"
"assignment, the body of the loop (the code between the \"do\" ... \"done\") was\n"
"executed once. In the body, we referred to the loop control variable \"$x\" using\n"
"standard variable expansion syntax, like any other environment variable. Also\n"
"notice that \"for\" loops always accept some kind of word list after the \"in\"\n"
"statement. In this case we specified four English words, but the word list can\n"
"also refer to file(s) on disk or even file wildcards. Look at the following\n"
"example, which demonstrates how to use standard shell wildcards:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:248
#, no-wrap
msgid "Using standard shell wildcards"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:249
#, no-wrap
msgid ""
"#!/usr/bin/env bash\n"
"\n"
"for myfile in /etc/r*\n"
"do\n"
"    if [ -d \"$myfile\" ] \n"
"    then\n"
"      echo \"$myfile (dir)\"\n"
"    else\n"
"      echo \"$myfile\"\n"
"    fi\n"
"done\n"
"\n"
"output:\n"
"\n"
"/etc/rc.d (dir)\n"
"/etc/resolv.conf\n"
"/etc/resolv.conf~\n"
"/etc/rpc\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:270
#, no-wrap
msgid ""
"The above code looped over each file in <path>/etc</path> that began with an\n"
"\"r\". To do this, bash first took our wildcard /etc/r* and expanded it, replacing\n"
"it with the string <path>/etc/rc.d</path> <path>/etc/resolv.conf</path>\n"
"<path>/etc/resolv.conf~</path> <path>/etc/rpc</path> before executing the loop.\n"
"Once inside the loop, the \"-d\" conditional operator was used to perform two\n"
"different actions, depending on whether myfile was a directory or not. If it\n"
"was, a \" (dir)\" was appended to the output line.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:280
#, no-wrap
msgid ""
"We can also use multiple wildcards and even environment variables in the word\n"
"list:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:284
#, no-wrap
msgid "Multiple wildcards and environment variables"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:285
#, no-wrap
msgid ""
"for x in /etc/r??? /var/lo* /home/drobbins/mystuff/* /tmp/${MYPATH}/*\n"
"do\n"
"    cp $x /mnt/mydira\n"
"done\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:292
#, no-wrap
msgid ""
"Bash will perform wildcard and variable expansion in all the right places, and\n"
"potentially create a very long word list.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:297
#, no-wrap
msgid ""
"While all of our wildcard expansion examples have used absolute paths, you can\n"
"also use relative paths, as follows:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:301
#, no-wrap
msgid "Using relative paths"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:302
#, no-wrap
msgid ""
"for x in ../* mystuff/*\n"
"do\n"
"     echo $x is a silly file\n"
"done\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:309
#, no-wrap
msgid ""
"In the above example, bash performs wildcard expansion relative to the current\n"
"working directory, just like when you use relative paths on the command line.\n"
"Play around with wildcard expansion a bit. You'll notice that if you use\n"
"absolute paths in your wildcard, bash will expand the wildcard to a list of\n"
"absolute paths. Otherwise, bash will use relative paths in the subsequent word\n"
"list. If you simply refer to files in the current working directory (for\n"
"example, if you type <c>for x in *</c>), the resultant list of files will not be\n"
"prefixed with any path information. Remember that preceding path information can\n"
"be stripped using the <c>basename</c> executable, as follows:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:320
#, no-wrap
msgid "Stripping preceding path with basename"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:321
#, no-wrap
msgid ""
"for x in /var/log/*\n"
"do\n"
"    echo `basename $x` is a file living in /var/log\n"
"done\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:328
#, no-wrap
msgid ""
"Of course, it's often handy to perform loops that operate on a script's\n"
"command-line arguments. Here's an example of how to use the \"$@\" variable,\n"
"introduced at the beginning of this article:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:333
#, no-wrap
msgid "Example use of $@ variable"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:334
#, no-wrap
msgid ""
"#!/usr/bin/env bash\n"
"\n"
"for thing in \"$@\"\n"
"do\n"
"    echo you typed ${thing}.\n"
"done\n"
"\n"
"<comment>output:</comment>\n"
"\n"
"$ allargs hello there you silly\n"
"you typed hello.\n"
"you typed there.\n"
"you typed you.\n"
"you typed silly.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:353
#, no-wrap
msgid "Shell arithmetic"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:357
#, no-wrap
msgid ""
"Before looking at a second type of looping construct, it's a good idea to become\n"
"familiar with performing shell arithmetic. Yes, it's true: You can perform\n"
"simple integer math using shell constructs. Simply enclose the particular\n"
"arithmetic expression between a \"$((\" and a \"))\", and bash will evaluate the\n"
"expression. Here are some examples:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:364
#, no-wrap
msgid "Counting in bash"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:365
#, no-wrap
msgid ""
"$ <i>echo $(( 100 / 3 ))</i>\n"
"33\n"
"$ <i>myvar=\"56\"</i>\n"
"$ <i>echo $(( $myvar + 12 ))</i>\n"
"68\n"
"$ <i>echo $(( $myvar - $myvar ))</i>\n"
"0\n"
"$ <i>myvar=$(( $myvar + 1 ))</i>\n"
"$ <i>echo $myvar</i>\n"
"57\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:378
#, no-wrap
msgid ""
"Now that you're familiar performing mathematical operations, it's time to\n"
"introduce two other bash looping constructs, \"while\" and \"until\".\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:385
#, no-wrap
msgid "More looping constructs: \"while\" and \"until\""
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:389
#, no-wrap
msgid ""
"A \"while\" statement will execute as long as a particular condition is true, and\n"
"has the following format:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:393
#, no-wrap
msgid "While statement template"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:394
#, no-wrap
msgid ""
"while [ condition ]\n"
"do\n"
"    statements\n"
"done\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:401
#, no-wrap
msgid ""
"\"While\" statements are typically used to loop a certain number of times, as in\n"
"the following example, which will loop exactly 10 times:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:405
#, no-wrap
msgid "Looping the statement 10 times"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:406
#, no-wrap
msgid ""
"myvar=0\n"
"while [ $myvar -ne 10 ]\n"
"do\n"
"    echo $myvar\n"
"    myvar=$(( $myvar + 1 ))\n"
"done\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:415
#, no-wrap
msgid ""
"You can see the use of arithmetic expansion to eventually cause the condition to\n"
"be false, and the loop to terminate.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:420
#, no-wrap
msgid ""
"\"Until\" statements provide the inverse functionality of \"while\" statements: They\n"
"repeat as long as a particular condition is false. Here's an \"until\" loop that\n"
"functions identically to the previous \"while\" loop:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:425
#, no-wrap
msgid "Until loop example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:426
#, no-wrap
msgid ""
"myvar=0\n"
"until [ $myvar -eq 10 ]\n"
"do\n"
"    echo $myvar\n"
"    myvar=$(( $myvar + 1 ))\n"
"done\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:437
#, no-wrap
msgid "Case statements"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:441
#, no-wrap
msgid ""
"\"Case\" statements are another conditional construct that comes in handy. Here's\n"
"an example snippet:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:445
#, no-wrap
msgid "Example case statement snippet"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:446
#, no-wrap
msgid ""
"case \"${x##*.}\" in\n"
"     gz)\n"
"           gzunpack ${SROOT}/${x}\n"
"           ;;\n"
"     bz2)\n"
"           bz2unpack ${SROOT}/${x}\n"
"           ;;\n"
"     *)\n"
"           echo \"Archive format not recognized.\"\n"
"           exit\n"
"           ;;\n"
"esac\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:461
#, no-wrap
msgid ""
"Above, bash first expands \"${x##*.}\". In the code, \"$x\" is the name of a file,\n"
"and \"${x##*.}\" has the effect of stripping all text except that following the\n"
"last period in the filename. Then, bash compares the resultant string against\n"
"the values listed to the left of the \")\"s. In this case, \"${x##*.}\" gets\n"
"compared against \"gz\", then \"bz2\" and finally \"*\". If \"${x##*.}\" matches any of\n"
"these strings or patterns, the lines immediately following the \")\" are executed,\n"
"up until the \";;\", at which point bash continues executing lines after the\n"
"terminating \"esac\". If no patterns or strings are matched, no lines of code are\n"
"executed; however, in this particular code snippet, at least one block of code\n"
"will execute, because the \"*\" pattern will catch everything that didn't match\n"
"\"gz\" or \"bz2\".\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:477
#, no-wrap
msgid "Functions and namespaces"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:481
#, no-wrap
msgid ""
"In bash, you can even define functions, similar to those in other procedural\n"
"languages like Pascal and C. In bash, functions can even accept arguments, using\n"
"a system very similar to the way scripts accept command-line arguments. Let's\n"
"take a look at a sample function definition and then proceed from there:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:487
#, no-wrap
msgid "Sample function definition"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:488
#, no-wrap
msgid ""
"tarview() {\n"
"    echo -n \"Displaying contents of $1 \"\n"
"    if [ ${1##*.} = tar ]\n"
"    then\n"
"        echo \"(uncompressed tar)\"\n"
"        tar tvf $1\n"
"    elif [ ${1##*.} = gz ]\n"
"    then\n"
"        echo \"(gzip-compressed tar)\"\n"
"        tar tzvf $1\n"
"    elif [ ${1##*.} = bz2 ]\n"
"    then\n"
"        echo \"(bzip2-compressed tar)\"\n"
"        cat $1 | bzip2 -d | tar tvf -\n"
"    fi\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><note>
#: en/articles/bash-by-example-p2.xml:507
#, no-wrap
msgid ""
"Another case: The above code could have been written using a \"case\" statement.\n"
"Can you figure out how?\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:512
#, no-wrap
msgid ""
"Above, we define a function called \"tarview\" that accepts one argument, a\n"
"tarball of some kind. When the function is executed, it identifies what type of\n"
"tarball the argument is (either uncompressed, gzip-compressed, or\n"
"bzip2-compressed), prints out a one-line informative message, and then displays\n"
"the contents of the tarball. This is how the above function should be called\n"
"(whether from a script or from the command line, after it has been typed in,\n"
"pasted in, or sourced):\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:521
#, no-wrap
msgid "Calling the above function"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:522
#, no-wrap
msgid ""
"$ <i>tarview shorten.tar.gz</i>\n"
"Displaying contents of shorten.tar.gz (gzip-compressed tar)\n"
"drwxr-xr-x ajr/abbot         0 1999-02-27 16:17 shorten-2.3a/\n"
"-rw-r--r-- ajr/abbot      1143 1997-09-04 04:06 shorten-2.3a/Makefile\n"
"-rw-r--r-- ajr/abbot      1199 1996-02-04 12:24 shorten-2.3a/INSTALL\n"
"-rw-r--r-- ajr/abbot       839 1996-05-29 00:19 shorten-2.3a/LICENSE\n"
"....\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:532
#, no-wrap
msgid ""
"As you can see, arguments can be referenced inside the function definition by\n"
"using the same mechanism used to reference command-line arguments. In addition,\n"
"the \"$#\" macro will be expanded to contain the number of arguments. The only\n"
"thing that may not work completely as expected is the variable \"$0\", which will\n"
"either expand to the string \"bash\" (if you run the function from the shell,\n"
"interactively) or to the name of the script the function is called from.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><note>
#: en/articles/bash-by-example-p2.xml:541
#, no-wrap
msgid ""
"Use'em interactively: Don't forget that functions, like the one above, can be\n"
"placed in your ~/.bashrc or ~/.bash_profile so that they are available for use\n"
"whenever you are in bash.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:549
#, no-wrap
msgid "Namespace"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:553
#, no-wrap
msgid ""
"Often, you'll need to create environment variables inside a function. While\n"
"possible, there's a technicality you should know about. In most compiled\n"
"languages (such as C), when you create a variable inside a function, it's placed\n"
"in a separate local namespace. So, if you define a function in C called\n"
"myfunction, and in it define a variable called \"x\", any global (outside the\n"
"function) variable called \"x\" will not be affected by it, eliminating side\n"
"effects.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:563
#, no-wrap
msgid ""
"While true in C, this isn't true in bash. In bash, whenever you create an\n"
"environment variable inside a function, it's added to the global namespace. This\n"
"means that it will overwrite any global variable outside the function, and will\n"
"continue to exist even after the function exits:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:569
#, no-wrap
msgid "Variable handling in bash"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:570
#, no-wrap
msgid ""
"#!/usr/bin/env bash\n"
"\n"
"myvar=\"hello\"\n"
"\n"
"myfunc() {\n"
"\n"
"    myvar=\"one two three\"\n"
"    for x in $myvar\n"
"    do\n"
"        echo $x\n"
"    done\n"
"}\n"
"\n"
"myfunc\n"
"\n"
"echo $myvar $x\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:589
#, no-wrap
msgid ""
"When this script is run, it produces the output \"one two three three\", showing\n"
"how \"$myvar\" defined in the function clobbered the global variable \"$myvar\", and\n"
"how the loop control variable \"$x\" continued to exist even after the function\n"
"exited (and also would have clobbered any global \"$x\", if one were defined).\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:596
#, no-wrap
msgid ""
"In this simple example, the bug is easy to spot and to compensate for by using\n"
"alternate variable names. However, this isn't the right approach; the best way\n"
"to solve this problem is to prevent the possibility of clobbering global\n"
"variables in the first place, by using the \"local\" command. When we use \"local\"\n"
"to create variables inside a function, they will be kept in the local namespace\n"
"and not clobber any global variables. Here's how to implement the above code so\n"
"that no global variables are overwritten:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:605
#, no-wrap
msgid "Assuring no global variables will be overwritten"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p2.xml:606
#, no-wrap
msgid ""
"#!/usr/bin/env bash\n"
"\n"
"myvar=\"hello\"\n"
"\n"
"myfunc() {\n"
"    local x\n"
"    local myvar=\"one two three\"\n"
"    for x in $myvar\n"
"    do\n"
"        echo $x\n"
"    done\n"
"}\n"
"\n"
"myfunc\n"
"\n"
"echo $myvar $x\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:625
#, no-wrap
msgid ""
"This function will produce the output \"hello\" -- the global \"$myvar\" doesn't get\n"
"overwritten, and \"$x\" doesn't continue to exist outside of myfunc. In the first\n"
"line of the function, we create x, a local variable that is used later, while in\n"
"the second example (local myvar=\"one two three\"\") we create a local myvar and\n"
"assign it a value. The first form is handy for keeping loop control variables\n"
"local, since we're not allowed to say \"for local x in $myvar\". This function\n"
"doesn't clobber any global variables, and you are encouraged to design all your\n"
"functions this way. The only time you should not use \"local\" is when you\n"
"explicitly want to modify a global variable.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:639
#, no-wrap
msgid "Wrapping it up"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p2.xml:643
#, no-wrap
msgid ""
"Now that we've covered the most essential bash functionality, it's time to look\n"
"at how to develop an entire application based in bash. In my next installment,\n"
"we'll do just that. See you then!\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/bash-by-example-p2.xml:653
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p2.xml:655
#, no-wrap
msgid "Useful links"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/bash-by-example-p2.xml:660
#, no-wrap
msgid ""
"    Read <uri link=\"/doc/en/articles/bash-by-example-p1.xml\">\n"
"    Bash by example: Part 1</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/bash-by-example-p2.xml:664
#, no-wrap
msgid ""
"    Read <uri\n"
"    link=\"/doc/en/articles/bash-by-example-p3.xml\">Bash by\n"
"    example: Part 3</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/bash-by-example-p2.xml:669
#, no-wrap
msgid ""
"    Visit <uri link=\"http://www.gnu.org/software/bash/bash.html\">GNU's bash home\n"
"    page</uri>\n"
"  "
msgstr ""
