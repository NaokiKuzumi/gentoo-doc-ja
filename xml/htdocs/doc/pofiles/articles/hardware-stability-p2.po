# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-02-23 10:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <guide><title>
#: en/articles/hardware-stability-p2.xml:6
#, no-wrap
msgid "Linux hardware stability guide, Part 2"
msgstr ""

#. type: Content of: <guide><abstract>
#: en/articles/hardware-stability-p2.xml:14
#, no-wrap
msgid ""
"In this article, Daniel Robbins shares his experiences in getting his NVIDIA\n"
"TNT graphics card working under Linux using NVIDIA's accelerated drivers. As he\n"
"does, he'll show you how to diagnose and fix IRQ and PCI latency timer issues\n"
"-- techniques you can use to ensure that your systems don't experience\n"
"lock-ups, inconsistent behavior, or data loss.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/hardware-stability-p2.xml:30
#, no-wrap
msgid "Drivers"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:32
#, no-wrap
msgid "The many causes of instability"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:36
#, no-wrap
msgid ""
"A stability problem is often not caused by defective hardware, but by improper\n"
"hardware configuration or flaky drivers. My experience in this area began when\n"
"I tried to get Linux working on my Diamond Viper V550, an NVIDIA TNT-based AGP\n"
"card, using NVIDIA's own accelerated drivers.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:43
#, no-wrap
msgid ""
"NVIDIA has their own display drivers for Linux, a collaboration between NVIDIA,\n"
"SGI, and VA Linux. These drivers have a lot of advantages over the standard\n"
"2d-only NVIDIA drivers included with Xfree86 4.0. For one, they have full\n"
"accelerated 3D support. Even better, they feature an official OpenGL 1.2\n"
"implementation, rather than just an enhanced version of Mesa. So, all in all,\n"
"these accelerated drivers are the ones you want to be using if you own an\n"
"NVIDIA-based graphics card, at least in theory.  My attempt to get them working\n"
"properly turned out to be an excellent learning experience, to say the least.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:54
#, no-wrap
msgid ""
"After I installed the accelerated Linux NVIDIA drivers (see <uri\n"
"link=\"#resources\">Resources</uri> later in this article), I started up Xfree86\n"
"and began playing around with all my 3D applications, now wonderfully\n"
"accelerated as they should be. Up until that point, I had had to reboot into\n"
"Windows NT in order to take advantage of 3D acceleration. Now, while I don't\n"
"mind NT, having to reboot to use 3D apps was somewhat annoying, and I was glad\n"
"to have one less reason to leave Linux and reboot my machine. However, after\n"
"playing around for an hour or so, I experienced a fatal setback to my Linux 3D\n"
"aspirations -- my machine locked up. My mouse simply stopped moving and the\n"
"screen froze, and I had to reboot my system.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:67
#, no-wrap
msgid ""
"Yes, I was having some kind of stability problem. But I didn't know exactly\n"
"what was causing the problem. Did I have flaky hardware, or was the card\n"
"misconfigured? Or maybe it was a problem with the driver -- did it not like my\n"
"VIA KT133-based Athlon motherboard? Whatever the problem, I wanted to resolve\n"
"it quickly. In this article, I'm going to share with you the procedure that I\n"
"went through to fix my hardware stability problem. Although you may not be\n"
"struggling with exactly the same issue, the steps that I used to diagnose and\n"
"(mostly) fix the problem are general in nature and applicable to many different\n"
"types of Linux hardware problems.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:81
#, no-wrap
msgid "First, the hardware"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:85
#, no-wrap
msgid ""
"The first thing that crossed my mind was that I might have flaky or\n"
"under-cooled hardware. On the one hand, my Diamond Viper V550 seemed to have no\n"
"problems under Windows NT. On the other hand, maybe Linux was somehow pushing\n"
"the chip harder and triggering heat-related lock-ups. My V550 did get\n"
"<e>extremely</e> hot, and its OEM heatsink seemed at best barely adequate. The\n"
"combination of the lock-ups and the fact that this card was being marginally\n"
"cooled convinced me to head over to PC Power and Cooling (see <uri\n"
"link=\"#resources\">Resources</uri>) to purchase a mini integrated heatsink/fan\n"
"for my V550.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:97
#, no-wrap
msgid ""
"So, I received my Video Cool, popped off the OEM heatsink on the video card\n"
"(voiding the warranty), cleaned off the TNT chip and affixed the Video Cool to\n"
"the top of the chip. Verdict? My video card didn't get extremely hot anymore,\n"
"but the lockups continued. The lesson I learned from this particular experience\n"
"is this -- if you ensure that your system is adequately cooled to begin with,\n"
"you'll never need to worry about components malfunctioning due to inadequate\n"
"cooling. This in itself is a good reason to invest some time and effort in\n"
"making sure that your workstations and servers run coolly. Now that I had taken\n"
"care of the heat issue, I knew that the lock-ups were most likely not due to\n"
"flaky hardware, and I began to look elsewhere.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:112
#, no-wrap
msgid "New drivers -- and a possible solution?"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:116
#, no-wrap
msgid ""
"I partly suspected that NVIDIA's drivers were themselves the cause of the\n"
"problem. Fortunately , a new version of the drivers had just been released, so\n"
"I immediately upgraded in the hope that this would solve my stability problem.\n"
"Unfortunately, it didn't, and after checking with others on the #nvidia channel\n"
"on openprojects.net, I found out that while not everyone was able to get the\n"
"driver to operate stably, it was working for a lot of people.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:125
#, no-wrap
msgid ""
"On #nvidia, someone suggested that I make sure that the V550 wasn't sharing an\n"
"IRQ with another card. Unlike the standard XFree86 driver, the accelerated\n"
"NVIDIA driver requires an IRQ for proper operation. To see if it had its own\n"
"dedicated IRQ, I typed <c>cat /proc/interrupts</c>, and lo and behold, my V550\n"
"was sharing an interrupt with my IDE controller. Before I explain how I solved\n"
"this particular problem, I'd like to give you a brief background on IRQs.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:134
#, no-wrap
msgid ""
"PCs use IRQs, and hardware interrupts in general, to allow peripheral devices,\n"
"such as the video card and the disk controllers, to signal the CPU that they\n"
"have data that's ready to be processed. In the old days before the PCI bus\n"
"existed, it was critical that each device in the machine had its own, dedicated\n"
"IRQ. In case you are still using ISA peripherals in your machine, this is still\n"
"true -- all non-PCI devices should have their own dedicated IRQ.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/hardware-stability-p2.xml:147
#, no-wrap
msgid "IRQs"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:149
#, no-wrap
msgid "IRQs and PCI"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:153
#, no-wrap
msgid ""
"However, things are a little different with the PCI bus. PCI allocates four\n"
"IRQs that can be used by the PCI/AGP cards in your system. In general, these\n"
"IRQs <e>can</e> be shared among multiple devices. (If you do this, make sure\n"
"that all the devices doing the sharing are PCI and AGP devices.) IRQ sharing is\n"
"important, especially for modern machines that may have five PCIs and one AGP\n"
"slot. Without IRQ sharing, you would be unable to have more than four IRQ-using\n"
"cards in your system.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:163
#, no-wrap
msgid ""
"There are, however, some limitations to PCI IRQ sharing. While modern\n"
"motherboards' BIOS and Linux kernels generally support PCI IRQ sharing, certain\n"
"PCI cards may simply refuse to work properly when sharing an IRQ with another\n"
"device. If you're experiencing random system lockups, especially lockups that\n"
"appear to be correlated with the use of a specific hardware device, you may\n"
"want to try and get all your PCI devices to use their own IRQs, just to be on\n"
"the safe side. The first step is to see if any devices in your system are\n"
"sharing IRQs to begin with. To do this, follow these steps:\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ol><li>
#: en/articles/hardware-stability-p2.xml:175
#, no-wrap
msgid ""
"    Use the various hardware devices in your system, such as disk, sound,\n"
"    video, SCSI, etc. This ensures that Linux will handle interrupts for these\n"
"    various devices.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ol><li>
#: en/articles/hardware-stability-p2.xml:180
#, no-wrap
msgid ""
"    <c>cat /proc/interrupts</c>, which will display a list and count of all\n"
"    interrupts which the Linux kernel has handled so far. Look in the far right\n"
"    column in this list. If two or more devices are listed in a single row,\n"
"    then they're sharing that particular IRQ.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:188
#, no-wrap
msgid ""
"If one of the devices in question is a non-PCI device (ISA or other legacy\n"
"cards) then you've found yourself an IRQ conflict, which you can attempt to fix\n"
"with your BIOS, the isapnptools package, or the physical jumpers on your\n"
"peripheral cards. Note that if a device is built in to your motherboard, it is\n"
"most likely a PCI device even though it doesn't occupy a physical PCI slot.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:196
#, no-wrap
msgid ""
"If all the devices in question are PCI or AGP devices, then whether or not you\n"
"have a problem depends on your hardware. Here are some steps you can take to\n"
"attempt to get all your PCI/AGP devices on their own IRQs:\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ol><li>
#: en/articles/hardware-stability-p2.xml:203
#, no-wrap
msgid ""
"    Enter your system BIOS and disable any unused peripherals (USB, parallel\n"
"    port, etc.) This can free up several IRQs, giving each piece of hardware in\n"
"    use a greater chance of being assigned its own unique IRQs.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ol><li>
#: en/articles/hardware-stability-p2.xml:208
#, no-wrap
msgid ""
"    Enter the PnP section of your BIOS and make sure that your BIOS is\n"
"    configured for a \"non-PnP\" operating system. Then select the \"Reset ESCD\n"
"    data\" option.  This will force your BIOS to reassign IRQs to all of your\n"
"    hardware devices the next time you reboot.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ol><li>
#: en/articles/hardware-stability-p2.xml:214
#, no-wrap
msgid ""
"    Boot Linux, use your hardware, <c>cat /proc/interrupts</c> and look at the\n"
"    result. Hopefully, all your devices are now on their own IRQs.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:220
#, no-wrap
msgid ""
"If your two suspect PCI devices are still sharing IRQs, you have two additional\n"
"options. Some BIOS setup programs allow you to assign certain IRQs to specific\n"
"PCI slots. If you have one of these rare BIOS setup programs, you can use this\n"
"functionality to eliminate the conflict. If you don't have this option in your\n"
"BIOS (most of us don't), there is one other sure fix for this problem -- shut\n"
"down your machine, turn off the power, unplug your PC from the wall, and wait a\n"
"few minutes. Then, open your system case and physically move your PCI cards to\n"
"different slots. This option may seem a bit odd, but it will definitely work\n"
"and is especially effective if you have a few free PCI slots in your system\n"
"(but it may take you some time to find the correct slot for each of your\n"
"cards.)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:234
#, no-wrap
msgid ""
"I performed the \"PCI card-shuffling trick\" and was able to get all the devices\n"
"in my system to use a unique IRQ. Well, almost. As you can see, two of my IDE\n"
"devices still shared an IRQ:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/hardware-stability-p2.xml:239
#, no-wrap
msgid "IRQ sharing"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/hardware-stability-p2.xml:240
#, no-wrap
msgid ""
"# <i>cat /proc/interrupts</i>\n"
"           CPU0\n"
"  0:   52063600          XT-PIC  timer\n"
"  1:     616810          XT-PIC  keyboard\n"
"  2:          0          XT-PIC  cascade\n"
"  5:      89084          XT-PIC  ide2, ide3\n"
"  7:    1515741          XT-PIC  eth0\n"
"  8:     155928          XT-PIC  rtc\n"
"  9: 1139761505          XT-PIC  nvidia\n"
" 10:     164000          XT-PIC  Ensoniq AudioPCI\n"
" 12:    4458823          XT-PIC  PS/2 Mouse\n"
" 14:     664176          XT-PIC  ide0\n"
" 15:      38661          XT-PIC  ide1\n"
"NMI:          0\n"
"ERR:          0                       \n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:258
#, no-wrap
msgid ""
"However, this was normal because the ide2 and ide3 devices were integrated onto\n"
"the same chip on my Promise FastTrak IDE card.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:263
#, no-wrap
msgid ""
"So, now that (almost) all my devices had a unique IRQ, I tried my accelerated\n"
"drivers and ... still experienced a lock-up in less than an hour. Apparently,\n"
"the shared PCI IRQ was not the problem at all. Oh, well ... time to look\n"
"elsewhere (yet again).\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:272
#, no-wrap
msgid "Fix one problem, find another"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:276
#, no-wrap
msgid ""
"After some time, I found something else that I could do to get the NVIDIA\n"
"drivers to run perfectly, albeit somewhat slower -- disable AGP. As much as I\n"
"didn't want to do this, the current version of the drivers permitted AGP to be\n"
"turned off entirely simply by adding a single line to the XF86Config. With AGP\n"
"turned off, I would reduce my video to memory bandwidth by 4x, but\n"
"significantly slower 3D would still be much faster than no hardware 3D\n"
"acceleration at all. After disabling AGP, I <e>finally</e> had a stable system!\n"
"However, this temporary solution created another problem. Whenever 3D OpenGL\n"
"animation was going on, audio playback became extremely garbled and choppy.\n"
"Eek!\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:289
#, no-wrap
msgid ""
"Fortunately, I was able to find a solution to my audio problem. I used the\n"
"<c>setpci</c> utility to set more appropriate PCI bus latency timer settings\n"
"for my PCI devices. I'll show you the specific solution in a minute -- but\n"
"first, some background.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:296
#, no-wrap
msgid ""
"As you probably know, the PCI bus is a shared resource -- all your PCI cards\n"
"take turns communicating over the bus, and normally, all is well. However,\n"
"because the PCI bus is a shared resource with a limited (although normally\n"
"adequate) bandwidth, it's possible for one PCI card to negatively affect the\n"
"performance of other PCI cards in the system. For example, what happens if PCI\n"
"card A is in the process of sending data across the bus and at the same moment\n"
"PCI card B attempts to send data? Does card A gracefully concede use of the\n"
"bus, or does it continue with its data transfer -- and if so, for how long?\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/hardware-stability-p2.xml:311
#, no-wrap
msgid "PCI latency"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:313
#, no-wrap
msgid "The PCI latency timer"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:317
#, no-wrap
msgid ""
"The answer to this question has everything to do with a configurable setting\n"
"that each PCI device has, the PCI bus latency timer. It's normally the role of\n"
"the Linux driver to set the proper PCI bus latency timer value for each PCI\n"
"device in your system, and most of the time the default settings are adequate\n"
"(if not optimal), all the devices get along fine and the system works properly.\n"
"The PCI bus latency timer can range from zero to 248. If a device has a setting\n"
"of zero, then it will immediately give up the bus if another device needs to\n"
"transmit. If a device has a setting of 248, it will continue to use the bus for\n"
"a longer period of time before stopping, while the other device waits for its\n"
"turn.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:330
#, no-wrap
msgid ""
"If all of your devices have relatively high PCI bus latency timer settings and\n"
"a lot of data is being sent over the bus, then your PCI cards are generally\n"
"going to have to wait <e>longer</e> before they gain control of the bus and can\n"
"begin sending data. However, once they gain control of the bus they will be\n"
"able to burst a lot of data across it before giving up the bus to another\n"
"device. This is why high PCI bus latency timer settings <e>increase latency</e>\n"
"(the delay in sending data across the bus), but also <e>increase effective\n"
"bandwidth</e>.  Because each device gets to burst large amounts of data across\n"
"the bus without interruption, the PCI bus is used more efficiently and your PCI\n"
"devices can transmit more data.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:343
#, no-wrap
msgid ""
"On the other hand, if all your PCI devices have low PCI bus latency settings,\n"
"then they're going to gladly give up the bus if another card needs to transmit\n"
"data. This results in a much lower data transmit latency, since no device is\n"
"going to hold on to the bus for an extended period of time, causing other\n"
"devices to wait. The dark side to all this is that low PCI bus latency timer\n"
"settings <e>reduce</e> the effective PCI bus bandwidth when two or more PCI\n"
"devices are operating simultaneously. This happens because large data bursts\n"
"become much less frequent and control of the bus changes rapidly, increasing\n"
"overhead.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:355
#, no-wrap
msgid ""
"Most Linux distributions include a suite of tools called pci-utils that allow\n"
"you to view and change the latency timer settings for your PCI devices. To view\n"
"your current PCI latency settings, type:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/hardware-stability-p2.xml:360
#, no-wrap
msgid "Viewing latency settings"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/hardware-stability-p2.xml:361
#, no-wrap
msgid "# <i>lspci -v</i>\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:365
#, no-wrap
msgid ""
"Typing this command will display very detailed information about all of your\n"
"PCI devices. The PCI latency setting for each device is listed on the third\n"
"line, right before the IRQ setting.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:373
#, no-wrap
msgid "PCI latency approaches"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:377
#, no-wrap
msgid ""
"How does this relate to my garbled sound problem? Well, I was experiencing\n"
"garbled sound because with my default PCI latency settings the way they were,\n"
"the V550 dominated the PCI bus when performing 3D acceleration. Here is why. My\n"
"V550 is an AGP 2X card, so when I turned off AGP (to increase stability), I\n"
"reduced the card's bandwidth to main memory by 75%! Because my V550 now was\n"
"trying to pump the same amount of data across the slower PCI bus, the PCI bus\n"
"was nearing 100% utilization, and this was causing problems for my sound\n"
"hardware. Audio devices are especially susceptible to PCI latency issues\n"
"because they generally have small data buffers and need their audio data\n"
"delivered to them on time to avoid buffer underruns. With my current settings,\n"
"the V550 was using so much PCI bandwidth that there wasn't enough left to get\n"
"data to my sound card, so I experienced audio distortion caused by buffer\n"
"underruns.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:393
#, no-wrap
msgid ""
"There are two possible solutions to this problem. The first and most obvious\n"
"solution would be to use the <c>setpci</c> command to reduce my V550's PCI\n"
"latency timer. This would cause it to share the PCI bus more readily, allowing\n"
"my other devices to transmit their data with less latency. I tried this\n"
"solution using the <c>setpci</c> command and it worked. However, I decided not\n"
"to go this route because I wanted to <e>maximize</e> my already crippled 3D\n"
"graphics performance, not additionally hinder it.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:403
#, no-wrap
msgid ""
"I decided to try out a second higher-performance option. Instead of reducing my\n"
"V550 PCI bus latency, I increased the PCI latency of all my devices to the\n"
"relatively high value of 176 (devices normally default to somewhere around 32,\n"
"except for my V550 which defaulted to above 200). Then I set the PCI bus\n"
"latency of my latency-sensitive devices to the maximum setting, 248. This\n"
"solved the problem, as I had hoped, by allowing my sound card to burst\n"
"relatively huge chunks of data across the bus in one go, allowing it to\n"
"maximize its use of the bus and avoid buffer-underrun conditions. At the same\n"
"time, my other devices could also transmit data in chunks that were small\n"
"enough not to hog the bus, but large enough to use the bus efficiently. I was\n"
"particularly pleased with this solution because I was able to solve my audio\n"
"problem while at the same time increasing the effective bandwidth of my\n"
"development machine's PCI bus. Here's the excerpt from my system startup\n"
"scripts that did the trick:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/hardware-stability-p2.xml:419
#, no-wrap
msgid "Latency adjustment"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/hardware-stability-p2.xml:420
#, no-wrap
msgid ""
"<comment># \"open up\" the PCI bus by allowing fairly long bursts\n"
"# for all devices, increasing performance</comment>\n"
"setpci -v -d *:* latency_timer=b0\n"
"\n"
"<comment># maximize latency timers for network and audio,\n"
"# allowing them to transmit more data per burst,\n"
"# preventing buffer over/underrun conditions</comment>\n"
"\n"
"setpci -v -s 00:0f.0 latency_timer=ff\n"
"setpci -v -s 00:0e.0 latency_timer=ff\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:433
#, no-wrap
msgid ""
"On the first line, the <c>-d *:*</c> option tells setpci to apply this setting\n"
"to all PCI devices. The <c>latency_timer=b0</c> option sets the timer to 176\n"
"(<c>b0</c> is hexadecimal for 176). The <c>-s</c> options on the last two lines\n"
"specify the PCI device that will be affected by PCI bus/slot and function,\n"
"rather than by vendor and device ID. These are the first numbers listed for\n"
"each device when you type lspci. The <c>ff</c> value specifies a latency timer\n"
"setting of 256, which is rounded down to 248 by <c>setpci</c>. If you're\n"
"experiencing a PCI latency timer-related issue, you'll need to experiment with\n"
"<c>lspci</c> and <c>setpci</c> to find the optimal values for your system. If\n"
"your hardware can handle it, larger latency timer values are best.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:448
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:452
#, no-wrap
msgid ""
"I hope you've found my hardware troubleshooting as good a learning experience\n"
"as I did. I'm now patiently waiting for the next release of the NVIDIA drivers.\n"
"Hopefully, these will solve my AGP-related instability issues. Below are\n"
"several excellent NVIDIA-related resources that may interest you.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/hardware-stability-p2.xml:460
#, no-wrap
msgid ""
"    Read Daniel's previous article in this series, <uri\n"
"    link=\"/doc/en/articles/hardware-stability-p1.xml\">Linux hardware stability\n"
"    guide, Part 1</uri>, where he shows you how to diagnose and fix CPU\n"
"    flakiness, as well as how to test your RAM for defects.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/hardware-stability-p2.xml:466
#, no-wrap
msgid ""
"    Check out <uri \n"
"    link=\"http://www.nvidia.com/Products/Drivers.nsf/Linux.html\">NVIDIA's \n"
"    accelerated Linux drivers</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/hardware-stability-p2.xml:471
#, no-wrap
msgid ""
"    If you're trying to diagnose a hardware problem related to your NVIDIA\n"
"    graphics card, be sure to check out the <uri\n"
"    link=\"http://www.technologyvault.co.uk/geforce/faq.php?list=categories&amp;prog=gef&amp;lang=en\">GeForce FAQ</uri>. It has lots of great\n"
"    Linux and Windows-related information.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/hardware-stability-p2.xml:477
#, no-wrap
msgid ""
"    For additional NVIDIA troubleshooting information, check out Sven\n"
"    Vermeulen's <uri link=\"/doc/en/nvidia-guide.xml\">NVIDIA Guide</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/hardware-stability-p2.xml:481
#, no-wrap
msgid ""
"    You may want to check out the <uri\n"
"    link=\"http://powertweak.sourceforge.net/\">Linux Powertweak project</uri>.\n"
"    Powertweak allows you to configure PCI latency timer settings (among other\n"
"    things) using a GTK and console-based interface.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/hardware-stability-p2.xml:487
#, no-wrap
msgid ""
"    Visit <uri link=\"http://www.pcpowercooling.com/\">PC Power and Cooling</uri>\n"
"    to purchase things like mini integrated heatsink/fans and Video Cool.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/hardware-stability-p2.xml:491
#, no-wrap
msgid ""
"    Check out <uri link=\"http://www.tennmax.com/\">Tennmax</uri>'s Lasagna\n"
"    series of coolers, which from my experience have a more cooling capacity\n"
"    than Video Cool but run a little bit louder.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/hardware-stability-p2.xml:500
#, no-wrap
msgid "About the author"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/hardware-stability-p2.xml:504
#, no-wrap
msgid ""
"Daniel Robbins lives in Albuquerque, New Mexico. He was the President/CEO of\n"
"Gentoo Technologies Inc., the Chief Architect of the Gentoo Project and is a\n"
"contributing author of several books published by MacMillan: Caldera OpenLinux\n"
"Unleashed, SuSE Linux Unleashed, and Samba Unleashed. Daniel has been involved\n"
"with computers in some fashion since the second grade when he was first exposed\n"
"to the Logo programming language and a potentially lethal dose of Pac Man. This\n"
"probably explains why he has since served as a Lead Graphic Artist at SONY\n"
"Electronic Publishing/Psygnosis. Daniel enjoys spending time with his wife Mary\n"
"and his new baby daughter, Hadassah. You can contact Daniel at\n"
"<mail>drobbins@gentoo.org</mail>.\n"
msgstr ""
