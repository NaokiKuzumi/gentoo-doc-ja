# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-02-23 10:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <guide><title>
#: en/articles/l-awk3.xml:6
#, no-wrap
msgid "Awk by example, Part 3"
msgstr ""

#. type: Content of: <guide><abstract>
#: en/articles/l-awk3.xml:13
#, no-wrap
msgid ""
"In this conclusion to the awk series, Daniel introduces you to awk's important\n"
"string functions, and then shows you how to write a complete\n"
"checkbook-balancing program from scratch. Along the way, you'll learn how to\n"
"write your own functions and use awk's multidimensional arrays. By the end of\n"
"this article, you'll have even more awk experience, allowing you to create more\n"
"powerful scripts.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/l-awk3.xml:30
#, no-wrap
msgid "String functions and ... checkbooks?"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:32
#, no-wrap
msgid "Formatting output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:36
#, no-wrap
msgid ""
"While awk's print statement does do the job most of the time, sometimes more is\n"
"needed. For those times, awk offers two good old friends called printf() and\n"
"sprintf(). Yes, these functions, like so many other awk parts, are identical to\n"
"their C counterparts. printf() will print a formatted string to stdout, while\n"
"sprintf() returns a formatted string that can be assigned to a variable. If\n"
"you're not familiar with printf() and sprintf(), an introductory C text will\n"
"quickly get you up to speed on these two essential printing functions. You can\n"
"view the printf() man page by typing \"man 3 printf\" on your Linux system.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:47
#, no-wrap
msgid ""
"Here's some sample awk sprintf() and printf() code. As you can see, everything\n"
"looks almost identical to C.\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:51
#, no-wrap
msgid "Sample awk sprintf() and printf() code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:52
#, no-wrap
msgid ""
"x=1\n"
"b=\"foo\"\n"
"printf(\"%s got a %d on the last test\\n\",\"Jim\",83)\n"
"myout=(\"%s-%d\",b,x)\n"
"print myout\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:60
#, no-wrap
msgid "This code will print:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:63
#, no-wrap
msgid "Code output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:64
#, no-wrap
msgid ""
"Jim got a 83 on the last test\n"
"foo-1\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:71
#, no-wrap
msgid "String functions"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:75
#, no-wrap
msgid ""
"Awk has a plethora of string functions, and that's a good thing. In awk, you\n"
"really need string functions, since you can't treat a string as an array of\n"
"characters as you can in other languages like C, C++, and Python. For example,\n"
"if you execute the following code:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:81 en/articles/l-awk3.xml:287
#, no-wrap
msgid "Example code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:82
#, no-wrap
msgid ""
"mystring=\"How are you doing today?\"\n"
"print mystring[3]\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:87
#, no-wrap
msgid "You'll receive an error that looks something like this:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:90
#, no-wrap
msgid "Example code error"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:91
#, no-wrap
msgid "awk: string.gawk:59: fatal: attempt to use scalar as array\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:95
#, no-wrap
msgid ""
"Oh, well. While not as convenient as Python's sequence types, awk's string\n"
"functions get the job done. Let's take a look at them.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:100
#, no-wrap
msgid ""
"First, we have the basic length() function, which returns the length of a\n"
"string. Here's how to use it:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:104
#, no-wrap
msgid "length() function example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:105
#, no-wrap
msgid "print length(mystring)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:109
#, no-wrap
msgid "This code will print the value:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:112
#, no-wrap
msgid "Printed value"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:113
#, no-wrap
msgid "24\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:117
#, no-wrap
msgid ""
"OK, let's keep going. The next string function is called index, and will return\n"
"the position of the occurrence of a substring in another string, or it will\n"
"return 0 if the string isn't found. Using mystring, we can call it this way:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:122
#, no-wrap
msgid "index() funtion example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:123
#, no-wrap
msgid "print index(mystring,\"you\")\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:127
#, no-wrap
msgid "Awk prints:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:130
#, no-wrap
msgid "Function output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:131
#, no-wrap
msgid "9\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:135
#, no-wrap
msgid ""
"We move on to two more easy functions, tolower() and toupper(). As you might\n"
"guess, these functions will return the string with all characters converted to\n"
"lowercase or uppercase respectively. Notice that tolower() and toupper() return\n"
"the new string, and don't modify the original. This code:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:141
#, no-wrap
msgid "Converting strings to lower or uppercase"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:142
#, no-wrap
msgid ""
"print tolower(mystring)\n"
"print toupper(mystring)\n"
"print mystring\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:148
#, no-wrap
msgid "....will produce this output:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:151
#, no-wrap
msgid "Output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:152
#, no-wrap
msgid ""
"how are you doing today?\n"
"HOW ARE YOU DOING TODAY?\n"
"How are you doing today?\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:158
#, no-wrap
msgid ""
"So far so good, but how exactly do we select a substring or even a single\n"
"character from a string? That's where substr() comes in. Here's how to call\n"
"substr():\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:163
#, no-wrap
msgid "substr() function example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:164
#, no-wrap
msgid "mysub=substr(mystring,startpos,maxlen)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:168
#, no-wrap
msgid ""
"mystring should be either a string variable or a literal string from which you'd\n"
"like to extract a substring. startpos should be set to the starting character\n"
"position, and maxlen should contain the maximum length of the string you'd like\n"
"to extract. Notice that I said maximum length; if length(mystring) is shorter\n"
"than startpos+maxlen, your result will be truncated. substr() won't modify the\n"
"original string, but returns the substring instead. Here's an example:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:176
#, no-wrap
msgid "Another example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:177
#, no-wrap
msgid "print substr(mystring,9,3)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:181 en/articles/l-awk3.xml:212
#, no-wrap
msgid "Awk will print:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:184
#, no-wrap
msgid "What awk prints"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:185
#, no-wrap
msgid "you\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:189
#, no-wrap
msgid ""
"If you regularly program in a language that uses array indices to access parts\n"
"of a string (and who doesn't), make a mental note that substr() is your awk\n"
"substitute. You'll need to use it to extract single characters and substrings;\n"
"because awk is a string-based language, you'll be using it often.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:196
#, no-wrap
msgid ""
"Now, we move on to some meatier functions, the first of which is called match().\n"
"match() is a lot like index(), except instead of searching for a substring like\n"
"index() does, it searches for a regular expression. The match() function will\n"
"return the starting position of the match, or zero if no match is found. In\n"
"addition, match() will set two variables called RSTART and RLENGTH. RSTART\n"
"contains the return value (the location of the first match), and RLENGTH\n"
"specifies its span in characters (or -1 if no match was found). Using RSTART,\n"
"RLENGTH, substr(), and a small loop, you can easily iterate through every match\n"
"in your string. Here's an example match() call:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:207
#, no-wrap
msgid "Example match() call"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:208
#, no-wrap
msgid "print match(mystring,/you/), RSTART, RLENGTH\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:215
#, no-wrap
msgid "Above function output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:216
#, no-wrap
msgid "9 9 3\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:222
#, no-wrap
msgid "String substitution"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:226
#, no-wrap
msgid ""
"Now, we're going to look at a couple of string substitution functions, sub() and\n"
"gsub(). These guys differ slightly from the functions we've looked at so far in\n"
"that they actually modify the original string. Here's a template that shows how\n"
"to call sub():\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:232
#, no-wrap
msgid "sub() function template"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:233
#, no-wrap
msgid "sub(regexp,replstring,mystring)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:237
#, no-wrap
msgid ""
"When you call sub(), it'll find the first sequence of characters in mystring\n"
"that matches regexp, and it'll replace that sequence with replstring. sub() and\n"
"gsub() have identical arguments; the only way they differ is that sub() will\n"
"replace the first regexp match (if any), and gsub() will perform a global\n"
"replace, swapping out all matches in the string. Here's an example sub() and\n"
"gsub() call:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:245
#, no-wrap
msgid "Sample both sub() and gsub() function call"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:246
#, no-wrap
msgid ""
"sub(/o/,\"O\",mystring)\n"
"print mystring\n"
"mystring=\"How are you doing today?\"\n"
"gsub(/o/,\"O\",mystring)\n"
"print mystring\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:254
#, no-wrap
msgid ""
"We had to reset mystring to its original value because the first sub() call\n"
"modified mystring directly. When executed, this code will cause awk to output:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:258
#, no-wrap
msgid "awk output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:259
#, no-wrap
msgid ""
"HOw are you doing today?\n"
"HOw are yOu dOing tOday?\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:264
#, no-wrap
msgid ""
"Of course, more complex regular expressions are possible. I'll leave it up to\n"
"you to test out some complicated regexps.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:269
#, no-wrap
msgid ""
"We wrap up our string function coverage by introducing you to a function called\n"
"split(). split()'s job is to \"chop up\" a string and place the various parts into\n"
"an integer-indexed array. Here's an example split() call:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:274
#, no-wrap
msgid "Example split() call"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:275
#, no-wrap
msgid "numelements=split(\"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\",mymonths,\",\")\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:279
#, no-wrap
msgid ""
"When calling split(), the first argument contains the literal string or string\n"
"variable to be chopped. In the second argument, you should specify the name of\n"
"the array that split() will stuff the chopped parts into. In the third element,\n"
"specify the separator that will be used to chop the strings up. When split()\n"
"returns, it'll return the number of string elements that were split. split()\n"
"assigns each one to an array index starting with one, so the following code:\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:288
#, no-wrap
msgid "print mymonths[1],mymonths[numelements]\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:292
#, no-wrap
msgid "....will print:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:295
#, no-wrap
msgid "Example output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:296
#, no-wrap
msgid "Jan Dec\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:302
#, no-wrap
msgid "Special string forms"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:306
#, no-wrap
msgid ""
"A quick note -- when calling length(), sub(), or gsub(), you can drop the last\n"
"argument and awk will apply the function call to $0 (the entire current line).\n"
"To print the length of each line in a file, use this awk script:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:311
#, no-wrap
msgid "Code printing the length of every line in a file"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:312
#, no-wrap
msgid ""
"{\n"
"    print length() \n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:320
#, no-wrap
msgid "Financial fun"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:324
#, no-wrap
msgid ""
"A few weeks ago, I decided to write my own checkbook balancing program in awk. I\n"
"decided that I'd like to have a simple tab-delimited text file into which I can\n"
"enter my most recent deposits and withdrawals. The idea was to hand this data to\n"
"an awk script that would automatically add up all the amounts and tell me my\n"
"balance. Here's how I decided to record all my transactions into my \"ASCII\n"
"checkbook\":\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:332
#, no-wrap
msgid "ASCII checkbox to record transactions"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:334
#, no-wrap
msgid "23 Aug 2000    food    -    -    Y    Jimmy's Buffet    30.25\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:338
#, no-wrap
msgid ""
"Every field in this file is separated by one or more tabs. After the date (field\n"
"1, $1), there are two fields called \"expense category\" and \"income category\".\n"
"When I'm entering an expense like on the above line, I put a four-letter\n"
"nickname in the exp field, and a \"-\" (blank entry) in the inc field. This\n"
"signifies that this particular item is a \"food expense\" :) Here's what a deposit\n"
"looks like:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:346
#, no-wrap
msgid "Deposit sample entry"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:348
#, no-wrap
msgid "23 Aug 2000    -    inco    -    Y    Boss Man        2001.00\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:352
#, no-wrap
msgid ""
"In this case, I put a \"-\" (blank) in the exp category, and put \"inco\" in the inc\n"
"category. \"inco\" is my nickname for generic (paycheck-style) income. Using\n"
"category nicknames allows me to generate a breakdown of my income and\n"
"expenditures by category. As far as the rest of the records, all the other\n"
"fields are fairly self-explanatory. The cleared? field (\"Y\" or \"N\") records\n"
"whether the transaction has been posted to my account; beyond that, there's a\n"
"transaction description, and a positive dollar amount.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:362
#, no-wrap
msgid ""
"The algorithm used to compute the current balance isn't too hard. Awk simply\n"
"needs to read in each line, one by one. If an expense category is listed but\n"
"there is no income category (it's \"-\"), then this item is a debit. If an income\n"
"category is listed, but no expense category (\"-\") is there, then the dollar\n"
"amount is a credit. And, if there is both an expense and income category listed,\n"
"then this amount is a \"category transfer\"; that is, the dollar amount will be\n"
"subtracted from the expense category and added to the income category. Again,\n"
"all these categories are virtual, but are very useful for tracking income and\n"
"expenditures, as well as for budgeting.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:376
#, no-wrap
msgid "The code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:380
#, no-wrap
msgid ""
"Time to look at the code. We'll start off with the first line, the BEGIN block\n"
"and a function definition:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:384
#, no-wrap
msgid "Balance, part 1"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:385
#, no-wrap
msgid ""
"#!/usr/bin/env awk -f\n"
"BEGIN {\n"
"    FS=\"\\t+\"\n"
"    months=\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\"\n"
"}\n"
"\n"
"function monthdigit(mymonth) {\n"
"    return (index(months,mymonth)+3)/4\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:397
#, no-wrap
msgid ""
"Adding the first \"#!...\" line to any awk script will allow it to be directly\n"
"executed from the shell, provided that you \"chmod +x myscript\" first. The\n"
"remaining lines define our BEGIN block, which gets executed before awk starts\n"
"processing our checkbook file. We set FS (the field separator) to \"\\t+\", which\n"
"tells awk that the fields will be separated by one or more tabs. In addition, we\n"
"define a string called months that's used by our monthdigit() function, which\n"
"appears next.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:407
#, no-wrap
msgid ""
"The last three lines show you how to define your own awk function. The format is\n"
"simple -- type \"function\", then the function name, and then the parameters\n"
"separated by commas, inside parentheses. After this, a \"{ }\" code block contains\n"
"the code that you'd like this function to execute. All functions can access\n"
"global variables (like our months variable). In addition, awk provides a\n"
"\"return\" statement that allows the function to return a value, and operates\n"
"similarly to the \"return\" found in C, Python, and other languages. This\n"
"particular function converts a month name in a 3-letter string format into its\n"
"numeric equivalent. For example, this:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:418
#, no-wrap
msgid "monthdigit() sample call"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:419
#, no-wrap
msgid "print monthdigit(\"Mar\")\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:423
#, no-wrap
msgid "....will print this:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:426
#, no-wrap
msgid "monthdigit() sample output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:427
#, no-wrap
msgid "3\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:431
#, no-wrap
msgid "Now, let's move on to some more functions.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:437
#, no-wrap
msgid "Financial functions"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:441
#, no-wrap
msgid ""
"Here are three more functions that perform the bookkeeping for us. Our main code\n"
"block, which we'll see soon, will process each line of the checkbook file\n"
"sequentially, calling one of these functions so that the appropriate\n"
"transactions are recorded in an awk array. There are three basic kinds of\n"
"transactions, credit (doincome), debit (doexpense) and transfer (dotransfer).\n"
"You'll notice that all three functions accept one argument, called mybalance.\n"
"mybalance is a placeholder for a two-dimensional array, which we'll pass in as\n"
"an argument. Up until now, we haven't dealt with two-dimensional arrays;\n"
"however, as you can see below, the syntax is quite simple. Just separate each\n"
"dimension with a comma, and you're in business.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:454
#, no-wrap
msgid ""
"We'll record information into \"mybalance\" as follows. The first dimension of the\n"
"array ranges from 0 to 12, and specifies the month, or zero for the entire year.\n"
"Our second dimension is a four-letter category, like \"food\" or \"inco\"; this is\n"
"the actual category we're dealing with. So, to find the entire year's balance\n"
"for the food category, you'd look in mybalance[0,\"food\"]. To find June's income,\n"
"you'd look in mybalance[6,\"inco\"].\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:462
#, no-wrap
msgid "Finding out information about incomes"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:464
#, no-wrap
msgid ""
"function doincome(mybalance) {\n"
"    mybalance[curmonth,$3] += amount\n"
"    mybalance[0,$3] += amount        \n"
"}\n"
"\n"
"function doexpense(mybalance) {\n"
"    mybalance[curmonth,$2] -= amount\n"
"    mybalance[0,$2] -= amount        \n"
"}\n"
"\n"
"function dotransfer(mybalance) {\n"
"    mybalance[0,$2] -= amount\n"
"    mybalance[curmonth,$2] -= amount\n"
"    mybalance[0,$3] += amount\n"
"    mybalance[curmonth,$3] += amount\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:483
#, no-wrap
msgid ""
"When doincome() or any of the other functions are called, we record the\n"
"transaction in two places -- mybalance[0,category] and mybalance[curmonth,\n"
"category], the entire year's category balance and the current month's category\n"
"balance, respectively. This allows us to easily generate either an annual or\n"
"monthly breakdown of income/expenditures later on.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:491
#, no-wrap
msgid ""
"If you look at these functions, you'll notice that the array referenced by\n"
"mybalance is passed in by reference. In addition, we also refer to several\n"
"global variables: curmonth, which holds the numeric value of the month of the\n"
"current record, $2 (the expense category), $3 (the income category), and amount\n"
"($7, the dollar amount). When doincome() and friends are called, all these\n"
"variables have already been set correctly for the current record (line) being\n"
"processed.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:503
#, no-wrap
msgid "The main block"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:507
#, no-wrap
msgid ""
"Here's the main code block that contains the code that parses each line of input\n"
"data. Remember, because we have set FS correctly, we can refer to the first\n"
"field as $1, the second field as $2, etc. When doincome() and friends are\n"
"called, the functions can access the current values of curmonth, $2, $3 and\n"
"amount from inside the function. Take a look at the code and meet me on the\n"
"other side for an explanation.\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:515
#, no-wrap
msgid "Balance, part 3"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:517
#, no-wrap
msgid ""
"{\n"
"    curmonth=monthdigit(substr($1,4,3))\n"
"    amount=$7\n"
"      \n"
"    #record all the categories encountered\n"
"    if ( $2 != \"-\" )\n"
"        globcat[$2]=\"yes\"\n"
"    if ( $3 != \"-\" )\n"
"        globcat[$3]=\"yes\"\n"
"\n"
"    #tally up the transaction properly\n"
"    if ( $2 == \"-\" ) {\n"
"        if ( $3 == \"-\" ) {\n"
"            print \"Error: inc and exp fields are both blank!\"\n"
"            exit 1\n"
"        } else {\n"
"            #this is income\n"
"            doincome(balance)\n"
"            if ( $5 == \"Y\" )\n"
"                doincome(balance2)\n"
"        }\n"
"    } else if ( $3 == \"-\" ) {\n"
"        #this is an expense \n"
"        doexpense(balance)\n"
"        if ( $5 == \"Y\" ) \n"
"            doexpense(balance2)\n"
"    } else {\n"
"        #this is a transfer\n"
"        dotransfer(balance)\n"
"        if ( $5 == \"Y\" ) \n"
"            dotransfer(balance2)\n"
"    }                        \n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:553
#, no-wrap
msgid ""
"In the main block, the first two lines set curmonth to an integer between 1 and\n"
"12, and set amount to field 7 (to make the code easier to understand). Then, we\n"
"have four interesting lines, where we write values into an array called\n"
"globcat. globcat, or the global categories array, is used to record all those\n"
"categories encountered in the file -- \"inco\", \"misc\", \"food\", \"util\", etc. For\n"
"example, if $2 == \"inco\", we set globcat[\"inco\"] to \"yes\". Later on, we can\n"
"iterate through our list of categories with a simple \"for (x in globcat)\" loop.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:563
#, no-wrap
msgid ""
"On the next twenty or so lines, we analyze fields $2 and $3, and record the\n"
"transaction appropriately. If $2==\"-\" and $3!=\"-\", we have some income, so we\n"
"call doincome(). If the situation is reversed, we call doexpense(); and if both\n"
"$2 and $3 contain categories, we call dotransfer(). Each time, we pass the\n"
"\"balance\" array to these functions so that the appropriate data is recorded\n"
"there.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:572
#, no-wrap
msgid ""
"You'll also notice several lines that say \"if ( $5 == \"Y\" ), record that same\n"
"transaction in balance2\". What exactly are we doing here? You'll recall that $5\n"
"contains either a \"Y\" or a \"N\", and records whether the transaction has been\n"
"posted to the account. Because we record the transaction to balance2 only if the\n"
"transaction has been posted, balance2 will contain the actual account balance,\n"
"while \"balance\" will contain all transactions, whether they have been posted or\n"
"not. You can use balance2 to verify your data entry (since it should match with\n"
"your current account balance according to your bank), and use \"balance\" to make\n"
"sure that you don't overdraw your account (since it will take into account any\n"
"checks you have written that have not yet been cashed).\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:587
#, no-wrap
msgid "Generating the report"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:591
#, no-wrap
msgid ""
"After the main block repeatedly processes each input record, we now have a\n"
"fairly comprehensive record of debits and credits broken down by category and by\n"
"month. Now, all we need to do is define an END block that will generate a\n"
"report, in this case a modest one:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:597
#, no-wrap
msgid "Generating final report"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:598
#, no-wrap
msgid ""
"END {\n"
"    bal=0\n"
"    bal2=0        \n"
"    for (x in globcat) {\n"
"        bal=bal+balance[0,x]\n"
"        bal2=bal2+balance2[0,x]    \n"
"    }\n"
"    printf(\"Your available funds: %10.2f\\n\", bal)\n"
"    printf(\"Your account balance: %10.2f\\n\", bal2)        \n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:611
#, no-wrap
msgid "This report prints out a summary that looks something like this:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:614
#, no-wrap
msgid "Final report"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk3.xml:615
#, no-wrap
msgid ""
"Your available funds:    1174.22\n"
"Your account balance:    2399.33\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:620
#, no-wrap
msgid ""
"In our END block, we used the \"for (x in globcat)\" construct to iterate through\n"
"every category, tallying up a master balance based on all the transactions\n"
"recorded. We actually tally up two balances, one for available funds, and\n"
"another for the account balance. To execute the program and process your own\n"
"financial goodies that you've entered into a file called\n"
"<path>mycheckbook.txt</path>, put all the above code into a text file called\n"
"<path>balance</path> and done <c>chmod +x balance</c>, and then type\n"
"\"<c>./balance mycheckbook.txt</c>\". The balance script will then add up all\n"
"your transactions and print out a two-line balance summary for you.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk3.xml:634
#, no-wrap
msgid "Upgrades"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:638
#, no-wrap
msgid ""
"I use a more advanced version of this program to manage my personal and\n"
"business finances. My version (which I couldn't include here due to space\n"
"limitations) prints out a monthly breakdown of income and expenses, including\n"
"annual totals, net income and a bunch of other stuff. Even better, it outputs\n"
"the data in HTML format, so that I can view it in a Web browser :) If you find\n"
"this program useful, I encourage you to add these features to this script. You\n"
"won't need to configure it to record any additional information; all the\n"
"information you need is already in balance and balance2. Just upgrade the END\n"
"block, and you're in business!\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk3.xml:650
#, no-wrap
msgid ""
"I hope you've enjoyed this series. For more information on awk, check out the\n"
"resources listed below.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/l-awk3.xml:659
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk3.xml:665
#, no-wrap
msgid ""
"    Read Daniel's other awk articles on developerWorks: Common threads: Awk by\n"
"    example, <uri link=\"l-awk1.xml\">Part 1</uri> and <uri link=\"l-awk2.xml\">Part\n"
"    2</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk3.xml:670
#, no-wrap
msgid ""
"    If you'd like a good old-fashioned book, O'Reilly's <uri\n"
"    link=\"http://www.oreilly.com/catalog/sed2/\">sed &amp; awk, 2nd\n"
"    Edition</uri> is a wonderful choice.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk3.xml:675
#, no-wrap
msgid ""
"    Be sure to check out the <uri\n"
"    link=\"http://www.faqs.org/faqs/computer-lang/awk/faq/\">comp.lang.awk\n"
"    FAQ</uri>. It also contains lots of additional awk links.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk3.xml:680
#, no-wrap
msgid ""
"    Patrick Hartigan's <uri link=\"http://sparky.rice.edu/~hartigan/awk.html\">awk\n"
"    tutorial</uri> is packed with handy awk scripts.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk3.xml:684
#, no-wrap
msgid ""
"    <uri link=\"http://www.tasoft.com/tawk.html\">Thompson's TAWK Compiler</uri>\n"
"    compiles awk scripts into fast binary executables. Versions are available\n"
"    for Windows, OS/2, DOS, and UNIX.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk3.xml:689
#, no-wrap
msgid ""
"    <uri link=\"http://www.gnu.org/software/gawk/manual/gawk.html\">The GNU Awk\n"
"    User's Guide</uri> is available for online reference.\n"
"  "
msgstr ""
