# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-02-23 10:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <guide><title>
#: en/articles/l-awk2.xml:6
#, no-wrap
msgid "Awk by example, Part 2"
msgstr ""

#. type: Content of: <guide><abstract>
#: en/articles/l-awk2.xml:13
#, no-wrap
msgid ""
"In this sequel to his previous intro to awk, Daniel Robbins continues to explore\n"
"awk, a great language with a strange name. Daniel will show you how to handle\n"
"multi-line records, use looping constructs, and create and use awk arrays. By\n"
"the end of this article, you'll be well versed in a wide range of awk features,\n"
"and you'll be ready to write your own powerful awk scripts.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/l-awk2.xml:29
#, no-wrap
msgid "Records, loops, and arrays"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:31
#, no-wrap
msgid "Multi-line records"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:35
#, no-wrap
msgid ""
"Awk is an excellent tool for reading in and processing structured data, such as\n"
"the system's <path>/etc/passwd</path> file. <path>/etc/passwd</path> is the UNIX\n"
"user database, and is a colon-delimited text file, containing a lot of important\n"
"information, including all existing user accounts and user IDs, among other\n"
"things. In <uri link=\"/doc/en/articles/l-awk1.xml\">my previous article</uri>, I\n"
"showed you how awk could easily parse this file. All we had to do was to set the\n"
"FS (field separator) variable to \":\".\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:45
#, no-wrap
msgid ""
"By setting the FS variable correctly, awk can be configured to parse almost any\n"
"kind of structured data, as long as there is one record per line. However, just\n"
"setting FS won't do us any good if we want to parse a record that exists over\n"
"multiple lines. In these situations, we also need to modify the RS record\n"
"separator variable. The RS variable tells awk when the current record ends and a\n"
"new record begins.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:54
#, no-wrap
msgid ""
"As an example, let's look at how we'd handle the task of processing an address\n"
"list of Federal Witness Protection Program participants:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:58
#, no-wrap
msgid "Sample entry from Federal Witness Protection Program participants list"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:59
#, no-wrap
msgid ""
"Jimmy the Weasel\n"
"100 Pleasant Drive\n"
"San Francisco, CA 12345\n"
"\n"
"Big Tony\n"
"200 Incognito Ave.\n"
"Suburbia, WA 67890\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:69
#, no-wrap
msgid ""
"Ideally, we'd like awk to recognize each 3-line address as an individual record,\n"
"rather than as three separate records. It would make our code a lot simpler if\n"
"awk would recognize the first line of the address as the first field ($1), the\n"
"street address as the second field ($2), and the city, state, and zip code as\n"
"field $3. The following code will do just what we want:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:76
#, no-wrap
msgid "Making one field from the address"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:77
#, no-wrap
msgid ""
"BEGIN {\n"
"    FS=\"\\n\"\n"
"    RS=\"\"\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:84
#, no-wrap
msgid ""
"Above, setting FS to \"\\n\" tells awk that each field appears on its own line. By\n"
"setting RS to \"\", we also tell awk that each address record is separated by a\n"
"blank line. Once awk knows how the input is formatted, it can do all the parsing\n"
"work for us, and the rest of the script is simple. Let's look at a complete\n"
"script that will parse this address list and print out each address record on a\n"
"single line, separating each field with a comma.\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:92
#, no-wrap
msgid "Complete script"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:93
#, no-wrap
msgid ""
"BEGIN {\n"
"    FS=\"\\n\"\n"
"    RS=\"\"\n"
"}\n"
"{ print $1 \", \" $2 \", \" $3 }\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:102
#, no-wrap
msgid ""
"If this script is saved as <path>address.awk</path>, and the address data is\n"
"stored in a file called <path>address.txt</path>, you can execute this script by\n"
"typing <c>awk -f address.awk address.txt</c>. This code produces the following\n"
"output:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:108
#, no-wrap
msgid "The script's output"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:109
#, no-wrap
msgid ""
"Jimmy the Weasel, 100 Pleasant Drive, San Francisco, CA 12345\n"
"Big Tony, 200 Incognito Ave., Suburbia, WA 67890\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:116
#, no-wrap
msgid "OFS and ORS"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:120
#, no-wrap
msgid ""
"In address.awk's print statement, you can see that awk concatenates (joins)\n"
"strings that are placed next to each other on a line. We used this feature to\n"
"insert a comma and a space (\", \") between the three address fields that appeared\n"
"on the line. While this method works, it's a bit ugly looking. Rather than\n"
"inserting literal \", \" strings between our fields, we can have awk do it for us\n"
"by setting a special awk variable called OFS. Take a look at this code snippet.\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:128
#, no-wrap
msgid "Sample code snippet"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:129
#, no-wrap
msgid "print \"Hello\", \"there\", \"Jim!\"\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:133
#, no-wrap
msgid ""
"The commas on this line are not part of the actual literal strings. Instead,\n"
"they tell awk that \"Hello\", \"there\", and \"Jim!\" are separate fields, and that\n"
"the OFS variable should be printed between each string. By default, awk produces\n"
"the following output:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:139
#, no-wrap
msgid "Output produced by awk"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:140
#, no-wrap
msgid "Hello there Jim!\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:144
#, no-wrap
msgid ""
"This shows us that by default, OFS is set to \" \", a single space. However, we\n"
"can easily redefine OFS so that awk will insert our favorite field separator.\n"
"Here's a revised version of our original <path>address.awk</path> program that\n"
"uses OFS to output those intermediate \", \" strings:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:150
#, no-wrap
msgid "Redefining OFS"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:151
#, no-wrap
msgid ""
"BEGIN {\n"
"    FS=\"\\n\"\n"
"    RS=\"\"\n"
"    OFS=\", \"\n"
"}\n"
"{ print $1, $2, $3 }\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:160
#, no-wrap
msgid ""
"Awk also has a special variable called ORS, called the \"output record\n"
"separator\". By setting ORS, which defaults to a newline (\"\\n\"), we can control\n"
"the character that's automatically printed at the end of a print statement. The\n"
"default ORS value causes awk to output each new print statement on a new line.\n"
"If we wanted to make the output double-spaced, we would set ORS to \"\\n\\n\". Or,\n"
"if we wanted records to be separated by a single space (and no newline), we\n"
"would set ORS to \" \".\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:172
#, no-wrap
msgid "Multi-line to tabbed"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:176
#, no-wrap
msgid ""
"Let's say that we wrote a script that converted our address list to a\n"
"single-line per record, tab-delimited format for import into a spreadsheet.\n"
"After using a slightly modified version of <path>address.awk</path>, it would\n"
"become clear that our program only works for three-line addresses. If awk\n"
"encountered the following address, the fourth line would be thrown away and not\n"
"printed:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:184
#, no-wrap
msgid "Sample entry"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:185
#, no-wrap
msgid ""
"Cousin Vinnie\n"
"Vinnie's Auto Shop\n"
"300 City Alley\n"
"Sosueme, OR 76543\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:192
#, no-wrap
msgid ""
"To handle situations like this, it would be good if our code took the number of\n"
"records per field into account, printing each one in order. Right now, the code\n"
"only prints the first three fields of the address. Here's some code that does\n"
"what we want:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:198
#, no-wrap
msgid "Improved code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:199
#, no-wrap
msgid ""
"BEGIN { \n"
"    FS=\"\\n\" \n"
"    RS=\"\" \n"
"    ORS=\"\" \n"
"} \n"
" \n"
"{  \n"
"    x=1 \n"
"    while ( x&lt;NF ) { \n"
"        print $x \"\\t\" \n"
"        x++ \n"
"    } \n"
"    print $NF \"\\n\" \n"
"} \n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:216
#, no-wrap
msgid ""
"First, we set the field separator FS to \"\\n\" and the record separator RS to \"\"\n"
"so that awk parses the multi-line addresses correctly, as before. Then, we set\n"
"the output record separator ORS to \"\", which will cause the print statement to\n"
"not output a newline at the end of each call. This means that if we want any\n"
"text to start on a new line, we need to explicitly write print \"\\n\".\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:224
#, no-wrap
msgid ""
"In the main code block, we create a variable called x that holds the number of\n"
"current field that we're processing. Initially, it's set to 1. Then, we use a\n"
"while loop (an awk looping construct identical to that found in the C language)\n"
"to iterate through all but the last record, printing the record and a tab\n"
"character. Finally, we print the last record and a literal newline; again, since\n"
"ORS is set to \"\", print won't output newlines for us. Program output looks like\n"
"this, which is exactly what we wanted:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:233
#, no-wrap
msgid "Our intended output. Not pretty, but tab delimited for easy import into a spreadsheet"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:234
#, no-wrap
msgid ""
"Jimmy the Weasel        100 Pleasant Drive      San Francisco, CA 12345 \n"
"Big Tony        200 Incognito Ave.      Suburbia, WA 67890\n"
"Cousin Vinnie   Vinnie's Auto Shop      300 City Alley  Sosueme, OR 76543\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:242
#, no-wrap
msgid "Looping constructs"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:246
#, no-wrap
msgid ""
"We've already seen awk's while loop construct, which is identical to its C\n"
"counterpart. Awk also has a \"do...while\" loop that evaluates the condition at\n"
"the end of the code block, rather than at the beginning like a standard while\n"
"loop. It's similar to \"repeat...until\" loops that can be found in other\n"
"languages. Here's an example:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:253
#, no-wrap
msgid "do...while example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:254
#, no-wrap
msgid ""
"{\n"
"    count=1\n"
"    do {\n"
"        print \"I get printed at least once no matter what\" \n"
"    } while ( count != 1 )\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:263
#, no-wrap
msgid ""
"Because the condition is evaluated after the code block, a \"do...while\" loop,\n"
"unlike a normal while loop, will always execute at least once. On the other\n"
"hand, a normal while loop will never execute if its condition is false when the\n"
"loop is first encountered.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:272
#, no-wrap
msgid "for loops"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:276
#, no-wrap
msgid ""
"Awk allows you to create for loops, which like while loops are identical to\n"
"their C counterpart:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:280
#, no-wrap
msgid "Example loop"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:281
#, no-wrap
msgid ""
"for ( initial assignment; comparison; increment ) {\n"
"    code block\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:287
#, no-wrap
msgid "Here's a quick example:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:290
#, no-wrap
msgid "Quick example"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:291
#, no-wrap
msgid ""
"for ( x = 1; x &lt;= 4; x++ ) {\n"
"    print \"iteration\",x\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:297
#, no-wrap
msgid "This snippet will print:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:300
#, no-wrap
msgid "Output of the above snippet"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:301
#, no-wrap
msgid ""
"iteration 1\n"
"iteration 2\n"
"iteration 3\n"
"iteration 4\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:310
#, no-wrap
msgid "Break and continue"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:314
#, no-wrap
msgid ""
"Again, just like C, awk provides break and continue statements. These statements\n"
"provide better control over awk's various looping constructs. Here's a code\n"
"snippet that desperately needs a break statement:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:319
#, no-wrap
msgid "Code snippet needing a break statement"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:320
#, no-wrap
msgid ""
"while (1) {\n"
"    print \"forever and ever...\"\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:326
#, no-wrap
msgid ""
"Because 1 is always true, this while loop runs forever. Here's a loop that only\n"
"executes ten times:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:330
#, no-wrap
msgid "Loop that executes only 10 times"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:331
#, no-wrap
msgid ""
"x=1\n"
"while(1) {\n"
"    print \"iteration\",x\n"
"    if ( x == 10 ) {\n"
"        break\n"
"    }\n"
"    x++\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:342
#, no-wrap
msgid ""
"Here, the break statement is used to \"break out\" of the innermost loop. \"break\"\n"
"causes the loop to immediately terminate and execution to continue at the line\n"
"after the loop's code block.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:348
#, no-wrap
msgid "The continue statement complements break, and works like this:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:351
#, no-wrap
msgid "The continues statement complementing break"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:352
#, no-wrap
msgid ""
"x=1\n"
"while (1) {\n"
"    if ( x == 4 ) {\n"
"        x++\n"
"        continue\n"
"    }\n"
"    print \"iteration\",x\n"
"    if ( x > 20 ) {\n"
"        break\n"
"    }\n"
"    x++\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:367
#, no-wrap
msgid ""
"This code will print \"iteration 1\" through \"iteration 21\", except for \"iteration\n"
"4\". If iteration equals 4, x is incremented and the continue statement is\n"
"called, which immediately causes awk to start to the next loop iteration without\n"
"executing the rest of the code block. The continue statement works for every\n"
"kind of awk iterative loop, just as break does. When used in the body of a for\n"
"loop, continue will cause the loop control variable to be automatically\n"
"incremented. Here's an equivalent for loop:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:376
#, no-wrap
msgid "Equivalent for loop"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:377
#, no-wrap
msgid ""
"for ( x=1; x&lt;=21; x++ ) {\n"
"    if ( x == 4 ) {\n"
"        continue\n"
"    }\n"
"    print \"iteration\",x\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:386
#, no-wrap
msgid ""
"It wasn't necessary to increment x just before calling continue as it was in our\n"
"while loop, since the for loop increments x automatically.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:393
#, no-wrap
msgid "Arrays"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:397
#, no-wrap
msgid ""
"You'll be pleased to know that awk has arrays. However, under awk, it's\n"
"customary to start array indices at 1, rather than 0:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:401
#, no-wrap
msgid "Sample awk arrays"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:402
#, no-wrap
msgid ""
"myarray[1]=\"jim\"\n"
"myarray[2]=456\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:407
#, no-wrap
msgid ""
"When awk encounters the first assignment, myarray is created and the element\n"
"myarray[1] is set to \"jim\". After the second assignment is evaluated, the array\n"
"has two elements.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:413
#, no-wrap
msgid ""
"Once defined, awk has a handy mechanism to iterate over the elements of an\n"
"array, as follows:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:417
#, no-wrap
msgid "Iterating over arrays"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:418
#, no-wrap
msgid ""
"for ( x in myarray ) {\n"
"    print myarray[x]\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:424
#, no-wrap
msgid ""
"This code will print out every element in the array myarray. When you use this\n"
"special \"in\" form of a for loop, awk will assign every existing index of myarray\n"
"to x (the loop control variable) in turn, executing the loop's code block once\n"
"after each assignment. While this is a very handy awk feature, it does have one\n"
"drawback -- when awk cycles through the array indices, it doesn't follow any\n"
"particular order. That means that there's no way for us to know whether the\n"
"output of above code will be:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:433
#, no-wrap
msgid "Output of above code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:434
#, no-wrap
msgid ""
"jim\n"
"456\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:439
#, no-wrap
msgid "or\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:442
#, no-wrap
msgid "Other output of above code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:443
#, no-wrap
msgid ""
"456\n"
"jim\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:448
#, no-wrap
msgid ""
"To loosely paraphrase Forrest Gump, iterating over the contents of an array is\n"
"like a box of chocolates -- you never know what you're going to get. This has\n"
"something to do with the \"stringiness\" of awk arrays, which we'll now take a\n"
"look at. \n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:457
#, no-wrap
msgid "Array index stringiness"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:461
#, no-wrap
msgid ""
"<uri link=\"/doc/en/articles/l-awk1.xml\">In my previous article</uri>, I showed\n"
"you that awk actually stores numeric values in a string format. While awk\n"
"performs the necessary conversions to make this work, it does open the door for\n"
"some odd-looking code:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:467
#, no-wrap
msgid "Odd looking code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:468
#, no-wrap
msgid ""
"a=\"1\"\n"
"b=\"2\"\n"
"c=a+b+3\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:474
#, no-wrap
msgid ""
"After this code executes, c is equal to 6. Since awk is \"stringy\", adding\n"
"strings \"1\" and \"2\" is functionally no different than adding the numbers 1 and\n"
"2. In both cases, awk will successfully perform the math. Awk's \"stringy\" nature\n"
"is pretty intriguing -- you may wonder what happens if we use string indexes for\n"
"arrays. For instance, take the following code:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:481
#, no-wrap
msgid "Sample code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:482
#, no-wrap
msgid ""
"myarr[\"1\"]=\"Mr. Whipple\"\n"
"print myarr[\"1\"]\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:487
#, no-wrap
msgid ""
"As you might expect, this code will print \"Mr. Whipple\". But how about if we\n"
"drop the quotes around the second \"1\" index?\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:491
#, no-wrap
msgid "Dropping the qoutes code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:492
#, no-wrap
msgid ""
"myarr[\"1\"]=\"Mr. Whipple\"\n"
"print myarr[1]\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:498
#, no-wrap
msgid ""
"Guessing the result of this code snippet is a bit more difficult. Does awk\n"
"consider myarr[\"1\"] and myarr[1] to be two separate elements of the array, or do\n"
"they refer to the same element? The answer is that they refer to the same\n"
"element, and awk will print \"Mr. Whipple\", just as in the first code snippet.\n"
"Although it may seem strange, behind the scenes awk has been using string\n"
"indexes for its arrays all this time!\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:507
#, no-wrap
msgid ""
"After learning this strange fact, some of us may be tempted to execute some\n"
"wacky code that looks like this:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:511
#, no-wrap
msgid "Wacky code"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:512
#, no-wrap
msgid ""
"myarr[\"name\"]=\"Mr. Whipple\"\n"
"print myarr[\"name\"]\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:517
#, no-wrap
msgid ""
"Not only does this code not raise an error, but it's functionally identical to\n"
"our previous examples, and will print \"Mr. Whipple\" just as before! As you can\n"
"see, awk doesn't limit us to using pure integer indexes; we can use string\n"
"indexes if we want to, without creating any problems. Whenever we use\n"
"non-integer array indices like myarr[\"name\"], we're using associative arrays.\n"
"Technically, awk isn't doing anything different behind the scenes than when we\n"
"use a string index (since even if you use an \"integer\" index, awk still treats\n"
"it as a string). However, you should still call 'em associative arrays -- it\n"
"sounds cool and will impress your boss. The stringy index thing will be our\n"
"little secret. ;) \n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:532
#, no-wrap
msgid "Array tools"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:536
#, no-wrap
msgid ""
"When it comes to arrays, awk gives us a lot of flexibility. We can use string\n"
"indexes, and we aren't required to have a continuous numeric sequence of indices\n"
"(for example, we can define myarr[1] and myarr[1000], but leave all other\n"
"elements undefined). While all this can be very helpful, in some circumstances\n"
"it can create confusion. Fortunately, awk offers a couple of handy features to\n"
"help make arrays more manageable.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:545
#, no-wrap
msgid ""
"First, we can delete array elements. If you want to delete element 1 of your\n"
"array fooarray, type:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:549
#, no-wrap
msgid "Deleting array elements"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:550
#, no-wrap
msgid "delete fooarray[1]\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:554
#, no-wrap
msgid ""
"And, if you want to see if a particular array element exists, you can use the\n"
"special \"in\" boolean operator as follows:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:558
#, no-wrap
msgid "Checking if a particular array element exists"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-awk2.xml:559
#, no-wrap
msgid ""
"if ( 1 in fooarray ) {\n"
"    print \"Ayep!  It's there.\"\n"
"} else {\n"
"    print \"Nope!  Can't find it.\"\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-awk2.xml:569
#, no-wrap
msgid "Next time"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-awk2.xml:573
#, no-wrap
msgid ""
"We've covered a lot of ground in this article. Next time, I'll round out your\n"
"awk knowledge by showing you how to use awk's math and string functions and how\n"
"to create your own functions. I'll also walk you through the creation of a\n"
"checkbook balancing program. Until then, I encourage you to write some of your\n"
"own awk programs, and to check out the following resources.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/l-awk2.xml:585
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk2.xml:591
#, no-wrap
msgid ""
"    Read Daniel's other awk articles on developerWorks: Common threads: Awk by\n"
"    example, <uri link=\"l-awk1.xml\">Part 1</uri> and <uri link=\"l-awk3.xml\">Part\n"
"    3</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk2.xml:596
#, no-wrap
msgid ""
"    If you'd like a good old-fashioned book, O'Reilly's <uri\n"
"    link=\"http://www.oreilly.com/catalog/sed2/\">sed &amp; awk, 2nd Edition</uri>\n"
"    is a wonderful choice.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk2.xml:601
#, no-wrap
msgid ""
"    Be sure to check out the <uri\n"
"    link=\"http://www.faqs.org/faqs/computer-lang/awk/faq/\">comp.lang.awk\n"
"    FAQ</uri>. It also contains lots of additional awk links.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk2.xml:606
#, no-wrap
msgid ""
"    Patrick Hartigan's <uri link=\"http://sparky.rice.edu/~hartigan/awk.html\">awk\n"
"    tutorial</uri> is packed with handy awk scripts.  \n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk2.xml:610
#, no-wrap
msgid ""
"    <uri link=\"http://www.tasoft.com/tawk.html\">Thompson's TAWK Compiler</uri>\n"
"    compiles awk scripts into fast binary executables. Versions are available\n"
"    for Windows, OS/2, DOS, and UNIX.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-awk2.xml:615
#, no-wrap
msgid ""
"    <uri link=\"http://www.gnu.org/software/gawk/manual/gawk.html\">The GNU Awk\n"
"    User's Guide</uri> is available for online reference.\n"
"  "
msgstr ""
