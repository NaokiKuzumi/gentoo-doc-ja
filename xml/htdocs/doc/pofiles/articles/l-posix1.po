# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-02-23 10:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <guide><title>
#: en/articles/l-posix1.xml:6
#, no-wrap
msgid "POSIX threads explained, part 1"
msgstr ""

#. type: Content of: <guide><abstract>
#: en/articles/l-posix1.xml:13
#, no-wrap
msgid ""
"POSIX (Portable Operating System Interface) threads are a great way to increase\n"
"the responsiveness and performance of your code. In this series, Daniel Robbins\n"
"shows you exactly how to use threads in your code. A lot of behind-the-scenes\n"
"details are covered, so by the end of this series you'll really be ready to\n"
"create your own multithreaded programs.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/l-posix1.xml:29
#, no-wrap
msgid "A simple and nimble tool for memory sharing"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:31
#, no-wrap
msgid "Threads are fun"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:35
#, no-wrap
msgid ""
"Knowing how to properly use threads should be part of every good programmer's\n"
"repertoire. Threads are similar to processes. Threads, like processes, are\n"
"time-sliced by the kernel. On uniprocessor systems the kernel uses time slicing\n"
"to simulate simultaneous execution of threads in much the same way it uses time\n"
"slicing with processes. And, on multiprocessor systems, threads are actually\n"
"able to run simultaneously, just like two or more processes can.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:44
#, no-wrap
msgid ""
"So why is multithreading preferable to multiple independent processes for most\n"
"cooperative tasks? Well, threads share the same memory space. Independent\n"
"threads can access the same variables in memory. So all of your program's\n"
"threads can read or write the declared global integers. If you've ever\n"
"programmed any non-trivial code that uses fork(), you'll recognize the\n"
"importance of this tool. Why? While fork() allows you to create multiple\n"
"processes, it also creates the following communication problem: how to get\n"
"multiple processes, each with their own independent memory space, to\n"
"communicate. There is no one simple answer to this problem. While there are many\n"
"different kinds of local IPC (inter-process communication), they all suffer from\n"
"two important drawbacks:\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:59
#, no-wrap
msgid ""
"    They impose some form of additional kernel overhead, lowering performance.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:62
#, no-wrap
msgid ""
"    In almost all situations, IPC is not a \"natural\" extension of your code. It\n"
"    often dramatically increases the complexity of your program.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:68
#, no-wrap
msgid ""
"Double bummer: overhead and complication aren't good things. If you've ever had\n"
"to make massive modifications to one of your programs so that it supports IPC,\n"
"you'll really appreciate the simple memory-sharing approach that threads\n"
"provide. POSIX threads don't need to make expensive and complicated\n"
"long-distance calls because all our threads happen to live in the same house.\n"
"With a little synchronization, all your threads can read and modify your\n"
"program's existing data structures. You don't have to pump the data through a\n"
"file descriptor or squeeze it into a tight, shared memory space. For this reason\n"
"alone you should consider the one process/multithread model rather than the\n"
"multiprocess/single-thread model.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:83
#, no-wrap
msgid "Threads are nimble"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:87
#, no-wrap
msgid ""
"But there's more. Threads also happen to be extremely nimble. Compared to a\n"
"standard fork(), they carry a lot less overhead. The kernel does not need to\n"
"make a new independent copy of the process memory space, file descriptors, etc.\n"
"That saves a lot of CPU time, making thread creation ten to a hundred times\n"
"faster than new process creation. Because of this, you can use a whole bunch of\n"
"threads and not worry too much about the CPU and memory overhead incurred. You\n"
"don't have a big CPU hit the way you do with fork(). This means you can\n"
"generally create threads whenever it makes sense in your program.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:98
#, no-wrap
msgid ""
"Of course, just like processes, threads will take advantage of multiple CPUs.\n"
"This is a really great feature if your software is designed to be used on a\n"
"multiprocessor machine (if the software is open source, it will probably end up\n"
"running on quite a few of these). The performance of certain kinds of threaded\n"
"programs (CPU-intensive ones in particular) will scale almost linearly with the\n"
"number of processors in the system. If you're writing a program that is very\n"
"CPU-intensive, you'll definitely want to find ways to use multiple threads in\n"
"your code. Once you're adept at writing threaded code, you'll also be able to\n"
"approach coding challenges in new and creative ways without a lot of IPC red\n"
"tape and miscellaneous mumbo-jumbo. All these benefits work synergistically to\n"
"make multithreaded programming fun, fast, and flexible.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:114
#, no-wrap
msgid "I think I'm a clone now"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:118
#, no-wrap
msgid ""
"If you've been in the Linux programming world for a while, you may know about\n"
"the __clone() system call. __clone() is similar to fork(), but allows you to do\n"
"lots of things that threads can do. For example, with __clone() you can\n"
"selectively share parts of your parent's execution context (memory space, file\n"
"descriptors, etc.) with a new child process. That's a good thing. But there is\n"
"also a not-so-good thing about __clone(). As the __clone() man page states:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:126
#, no-wrap
msgid "__clone() man page excerpt"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:127
#, no-wrap
msgid ""
"    \"The __clone call is Linux-specific and should not be used in programs\n"
"    intended to be portable. For programming threaded applications (multiple\n"
"    threads of control in the same memory space), it is better to use a library\n"
"    implementing the POSIX 1003.1c thread API, such as the Linux-Threads\n"
"    library. See pthread_create(3thr).\"\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:135
#, no-wrap
msgid ""
"So, while __clone() offers many of the benefits of threads, it is not portable.\n"
"That doesn't mean you shouldn't use it in your code. But you should weigh this\n"
"fact when you are considering using __clone() in your software. Fortunately, as\n"
"the __clone() man page states, there's a better alternative: POSIX threads. When\n"
"you want to write portable multithreaded code, code that works under Solaris,\n"
"FreeBSD, Linux, and more, POSIX threads are the way to go.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:146
#, no-wrap
msgid "Beginning threads"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:150
#, no-wrap
msgid "Here's a simple example program that uses POSIX threads:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:153
#, no-wrap
msgid "Sample program using POSIX threads"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:154
#, no-wrap
msgid ""
"#include &lt;pthread.h&gt;\n"
"#include &lt;stdlib.h&gt;\n"
"#include &lt;unistd.h&gt;\n"
"\n"
"void *thread_function(void *arg) {\n"
"  int i;\n"
"  for ( i=0; i&lt;20; i++ ) {\n"
"    printf(\"Thread says hi!\\n\");\n"
"    sleep(1);\n"
"  }\n"
"  return NULL;\n"
"}\n"
"\n"
"int main(void) {\n"
"\n"
"  pthread_t mythread;\n"
"  \n"
"  if ( pthread_create( &amp;mythread, NULL, thread_function, NULL) ) {\n"
"    printf(\"error creating thread.\");\n"
"    abort();\n"
"  }\n"
"\n"
"  if ( pthread_join ( mythread, NULL ) ) {\n"
"    printf(\"error joining thread.\");\n"
"    abort();\n"
"  }\n"
"\n"
"  exit(0);\n"
"\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:187
#, no-wrap
msgid "To compile this program, simply save this program as thread1.c, and type:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:190
#, no-wrap
msgid "Compiling above program"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:191
#, no-wrap
msgid "$ <i>gcc thread1.c -o thread1 -lpthread</i>\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:195
#, no-wrap
msgid "Run it by typing:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:198
#, no-wrap
msgid "Running that program"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:199
#, no-wrap
msgid "$ <i>./thread1</i>\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:205
#, no-wrap
msgid "Understanding thread1.c"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:209
#, no-wrap
msgid ""
"<path>thread1.c</path> is an extremely simple threaded program. While it doesn't\n"
"do anything useful, it'll help you understand how threads work. Let's take a\n"
"step-by-step look at what this program does. In main() we first declare a\n"
"variable called mythread, which has a type of pthread_t. The pthread_t type,\n"
"defined in <path>pthread.h</path>, is often called a \"thread id\" (commonly\n"
"abbreviated as \"tid\"). Think of it as a kind of thread handle.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:218
#, no-wrap
msgid ""
"After mythread is declared (remember that mythread is just a \"tid\", or a handle\n"
"to the thread we are about to create), we call the pthread_create function to\n"
"create a real, living thread. Don't be confused by the fact that\n"
"pthread_create() is inside an \"if\" statement. Since pthread_create() returns\n"
"zero on success and a non-zero value on failure, placing the function call in an\n"
"if() is just an elegant way of detecting a failed pthread_create() call. Let's\n"
"look at the arguments to pthread_create. The first one is a pointer to mythread,\n"
"&amp;mythread. The second argument, currently set to NULL, can be used to define\n"
"certain attributes for our thread. Because the default thread attributes work\n"
"for us, we simply set it to NULL.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:231
#, no-wrap
msgid ""
"Our third argument is the name of a function that the new thread will execute\n"
"when it starts. In this case the name of the function is thread_function().\n"
"When this thread_function() returns, our new thread will terminate. In this\n"
"example our thread function doesn't do anything remarkable. It just prints out\n"
"\"Thread says hi!\" 20 times and then exits. Notice that thread_function()\n"
"accepts a void * as an argument and also returns a void * as a return value.\n"
"This shows us that it's possible to use a void * to pass an arbitrary piece of\n"
"data to our new thread, and that our new thread can return an arbitrary piece\n"
"of data when it finishes. Now, how do we pass our thread an arbitrary argument?\n"
"Easy. We use the fourth argument to the pthread_create() call. In this example,\n"
"we set it to NULL because we don't need to pass any data into our trivial\n"
"thread_function().\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:246
#, no-wrap
msgid ""
"As you may have guessed, the program will consist of two threads after\n"
"pthread_create() successfully returns. Wait a minute, two threads? Didn't we\n"
"just create a single thread? Yes, we did. But our main program is also\n"
"considered a thread. Think of it this way: if you write a program and don't use\n"
"POSIX threads at all, the program will be single-threaded (this single thread is\n"
"called the \"main\" thread). By creating a new thread we now have a total of two\n"
"threads in our program.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:256
#, no-wrap
msgid ""
"I imagine you have at least two important questions at this point. The first is\n"
"what the main thread does after the new thread is created. It keeps on going and\n"
"executes the next line of our program in sequence (in this case that line is \"if\n"
"( pthread_join(...))\"). The second question you may be wondering about is what\n"
"happens to our new thread when it exits. It stops and waits to be merged or\n"
"\"joined\" with another thread as part of its cleanup process.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:265
#, no-wrap
msgid ""
"OK, now on to pthread_join(). Just as pthread_create() split our single thread\n"
"into two threads, pthread_join() merges two threads into a single thread. The\n"
"first argument to pthread_join() is our tid mythread. The second argument is a\n"
"pointer to a void pointer. If the void pointer is non-NULL, pthread_join will\n"
"place our thread's void * return value at the location we specify. Since we\n"
"don't care about thread_function()'s return value, we set it to NULL.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:274
#, no-wrap
msgid ""
"You'll notice that our thread_function() takes 20 seconds to complete. Long\n"
"before thread_function() completes, our main thread has already called\n"
"pthread_join(). When this occurs our main thread will block (go to sleep) and\n"
"wait for thread_function() to complete. When thread_function() completes,\n"
"pthread_join() will return. Now our program has one main thread again. When our\n"
"program exits, all new threads have been pthread_join()ed. This is exactly how\n"
"you should deal with every new thread you create in your programs. If a new\n"
"thread isn't joined it will still count against your system's maximum thread\n"
"limit. This means that not doing the proper cleanup will eventually cause new\n"
"pthread_create() calls to fail.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:289
#, no-wrap
msgid "No parents, no children"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:293
#, no-wrap
msgid ""
"If you've used the fork() system call you're probably familiar with the concept\n"
"of parent and child processes. When a process creates another new process, using\n"
"fork(), the new process is considered the child and the original process is\n"
"considered the parent. This creates a hierarchical relationship that can be\n"
"handy, especially when waiting for child processes to terminate. The waitpid()\n"
"function, for example, will tell the current process to wait for the termination\n"
"of any child processes. waitpid() is used to implement a simple cleanup routine\n"
"in your parent process.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:304
#, no-wrap
msgid ""
"Things are a little more interesting with POSIX threads. You may have noticed\n"
"that I have intentionally avoided using the terms \"parent thread\" and \"child\n"
"thread\" so far. That's because with POSIX threads this hierarchical relationship\n"
"doesn't exist. While a main thread may create a new thread, and that new thread\n"
"may create an additional new thread, the POSIX threads standard views all your\n"
"threads as a single pool of equals. So the concept of waiting for a child thread\n"
"to exit doesn't make sense. The POSIX threads standard does not record any\n"
"\"family\" information. This lack of genealogy has one major implication: if you\n"
"want to wait for a thread to terminate, you need to specify which one you are\n"
"waiting for by passing the proper tid to pthread_join(). The threads library\n"
"can't figure it out for you.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:318
#, no-wrap
msgid ""
"To many people this isn't very good news because it can complicate programs that\n"
"consist of more than two threads. Don't let it worry you. The POSIX threads\n"
"standard provides all the tools you need to manage multiple threads gracefully.\n"
"Actually, the fact that there is no parent/child relationship opens up some\n"
"creative ways to use threads in our programs. For example, if we have a thread\n"
"called thread 1, and thread 1 creates a thread called thread 2, it's not\n"
"necessary for thread 1 itself to call pthread_join() for thread 2. Any other\n"
"thread in the program can do that. This allows for interesting possibilities\n"
"when you write heavily multithreaded code. You can, for example, create a global\n"
"\"dead list\" that contains all stopped threads and then have a special cleanup\n"
"thread that simply waits for an item to be added to the list. The cleanup thread\n"
"calls pthread_join() to merge it with itself. Now your entire cleanup will be\n"
"handled neatly and efficiently in a single thread.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:336
#, no-wrap
msgid "Synchronized swimming"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:340
#, no-wrap
msgid ""
"Now it's time to take a look at some code that does something a little\n"
"unexpected. Here's thread2.c:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:344
#, no-wrap
msgid "thread2.c"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:345
#, no-wrap
msgid ""
"#include &lt;pthread.h&gt;\n"
"#include &lt;stdlib.h&gt;\n"
"#include &lt;unistd.h&gt;\n"
"#include &lt;stdio.h&gt;\n"
"\n"
"int myglobal;\n"
"\n"
" void *thread_function(void *arg) {\n"
"  int i,j;\n"
"  for ( i=0; i&lt;20; i++ ) {\n"
"    j=myglobal;\n"
"    j=j+1;\n"
"    printf(\".\");\n"
"    fflush(stdout);\n"
"   sleep(1);\n"
"    myglobal=j;\n"
"  }\n"
"  return NULL;\n"
"}\n"
"\n"
"int main(void) {\n"
"\n"
"  pthread_t mythread;\n"
"  int i;\n"
"\n"
"  if ( pthread_create( &amp;mythread, NULL, thread_function, NULL) ) {\n"
"    printf(\"error creating thread.\");\n"
"    abort();\n"
"  }\n"
"\n"
"  for ( i=0; i&lt;20; i++) {\n"
"    myglobal=myglobal+1;\n"
"    printf(\"o\");\n"
"    fflush(stdout);\n"
"    sleep(1);\n"
"  }\n"
"\n"
"  if ( pthread_join ( mythread, NULL ) ) {\n"
"    printf(\"error joining thread.\");\n"
"    abort();\n"
"  }\n"
"\n"
"  printf(\"\\nmyglobal equals %d\\n\",myglobal);\n"
"\n"
"  exit(0);\n"
"\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/l-posix1.xml:397
#, no-wrap
msgid "Understanding thread2.c"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:401
#, no-wrap
msgid ""
"This program, like our first one, creates a new thread. Both the main thread\n"
"and the new thread then increment a global variable called myglobal 20 times.\n"
"But the program itself produces some unexpected results. Compile it by typing:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:406
#, no-wrap
msgid "Compiling program"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:407
#, no-wrap
msgid "$ <i>gcc thread2.c -o thread2 -lpthread</i>\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:411
#, no-wrap
msgid "And run it:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:414
#, no-wrap
msgid "Running it"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/l-posix1.xml:415
#, no-wrap
msgid ""
"$ <i>./thread2</i>\n"
"..o.o.o.o.oo.o.o.o.o.o.o.o.o.o..o.o.o.o.o\n"
"myglobal equals 21\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:421
#, no-wrap
msgid ""
"Quite unexpected! Since myglobal starts at zero, and both the main thread\n"
"and the new thread each increment it by 20, we should see myglobal equaling 40\n"
"at the end of the program. Since myglobal equals 21, we know that something\n"
"fishy is going on here. But what is it?\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:428
#, no-wrap
msgid ""
"Give up? OK, I'll show you why it happens. Take a look at thread_function().\n"
"Notice how we copy myglobal into a local variable called \"j\"? And see how we\n"
"increment j, then sleep for one second, and only then copy our new j value into\n"
"myglobal? That's the key. Imagine what happens if our main thread increments\n"
"myglobal just <e>after</e> our new thread copies the value of myglobal into j.\n"
"When thread_function() writes the value of j back to myglobal, it will overwrite\n"
"the modification that our main thread made.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:438
#, no-wrap
msgid ""
"When writing threaded programs, you want to avoid useless side effects like the\n"
"one we just looked at because they're a waste of time (except when you are\n"
"writing articles on POSIX threads, of course :). Now, what can we do to\n"
"eliminate this hassle?\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:445
#, no-wrap
msgid ""
"Since the problem occurs because we copy myglobal to j and hold it there for one\n"
"second before writing it back, we could try to avoid using a temporary local\n"
"variable and incrementing myglobal directly. While this solution will probably\n"
"work in this particular example, it is not correct. And if we were performing a\n"
"relatively complex mathematical operation on myglobal instead of just\n"
"incrementing it, it would certainly fail. But why?\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/l-posix1.xml:454
#, no-wrap
msgid ""
"To understand the problem, you need to remember that threads run simultaneously.\n"
"Even on a uniprocessor machine (where the kernel uses time slicing to simulate\n"
"true multitasking) we can, from a programmer's perspective, imagine both threads\n"
"as executing at the same time. thread2.c has problems because the code in\n"
"thread_function() relies on the fact that myglobal will not be modified during\n"
"the ~1 second before it is incremented. We need some way for one thread to tell\n"
"the other to \"hold off\" while it's making changes to myglobal. I'll show you\n"
"exactly how to do this in my next article. See you then.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/l-posix1.xml:469
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:475
#, no-wrap
msgid ""
"    Read Daniel's POSIX threads explained <uri link=\"l-posix2.xml\">Part 2</uri>\n"
"    and <uri link=\"l-posix3.xml\">Part 3</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:479
#, no-wrap
msgid ""
"    See documentation on <uri\n"
"    link=\"http://metalab.unc.edu/pub/Linux/docs/faqs/Threads-FAQ/html/\">Linux\n"
"    threads</uri>, by Sean Walton, KB7rfa \n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:484
#, no-wrap
msgid ""
"    Take a POSIX threads <uri\n"
"    link=\"http://www.math.arizona.edu/swig/pthreads/threads.html\">tutorial</uri>\n"
"    by Mark Hays at the University of Arizona \n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:489
#, no-wrap
msgid ""
"    In <uri link=\"http://hwaci.com/sw/pttcl/pttcl.html\">An Introduction to\n"
"    Pthreads-Tcl</uri>, see changes to Tcl that enable it to be used with POSIX\n"
"    threads\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:494
#, no-wrap
msgid ""
"    Take another tutorial, <uri \n"
"    link=\"http://dis.cs.umass.edu/~wagner/threads_html/tutorial.html\">Getting\n"
"    Started with POSIX Threads</uri>, by Tom Wagner and Don Towsley in the\n"
"    Computer Science Department at the University of Massachusetts, Amherst \n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:500
#, no-wrap
msgid ""
"    Always go to your friendly Linux pthread man pages (<c>man -k pthread</c>)\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:503
#, no-wrap
msgid ""
"    <uri link=\"http://moss.csc.ncsu.edu/~mueller/pthreads/\">FSU PThreads</uri> is a\n"
"    C library that implements POSIX threads for SunOS 4.1.x, Solaris 2.x, SCO\n"
"    UNIX, FreeBSD, Linux, and DOS\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:508
#, no-wrap
msgid ""
"    Refer to the home page for <uri\n"
"    link=\"http://www.sai.msu.su/sal/C/2/PCTHREADS.html\">POSIX and DCE threads for\n"
"    Linux</uri>\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:513
#, no-wrap
msgid ""
"    See <uri link=\"http://pauillac.inria.fr/~xleroy/linuxthreads/\">The\n"
"    LinuxThreads Library</uri>\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:517
#, no-wrap
msgid ""
"    <uri link=\"http://www.users.itl.net.ua/~prool/proolix.html\">Proolix</uri> is\n"
"    a simple POSIX-compliant operating system for i8086+ under permanent\n"
"    development \n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:522
#, no-wrap
msgid ""
"    Take a look at David R. Butenhof's book <uri\n"
"    link=\"http://www.amazon.com/exec/obidos/ASIN/0201633922/o/qid=961544788/sr=8-1/ref=aps_sr_b_1_1/002-2882413-1227240\">\n"
"    Programming with POSIX Threads</uri>, in which he covers, among other\n"
"    things, the possible permutations of not using mutexes\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/l-posix1.xml:528
#, no-wrap
msgid ""
"    Check out W. Richard Stevens' book <uri\n"
"    link=\"http://search.borders.com/fcgi-bin/db2www/search/search.d2w/Details?&amp;mediaType=Book&amp;prodID=2362607\">UNIX\n"
"    Network Programming: Network APIs: Sockets and XTI, Volume 1</uri>\n"
"  "
msgstr ""
