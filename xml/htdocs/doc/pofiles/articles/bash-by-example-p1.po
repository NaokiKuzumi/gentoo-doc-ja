# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-02-23 10:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <guide><title>
#: en/articles/bash-by-example-p1.xml:6
#, no-wrap
msgid "Bash by example, Part 1"
msgstr ""

#. type: Content of: <guide><abstract>
#: en/articles/bash-by-example-p1.xml:13
#, no-wrap
msgid ""
"By learning how to program in the bash scripting language, your day-to-day\n"
"interaction with Linux will become more fun and productive, and you'll be able\n"
"to build upon those standard UNIX constructs (like pipelines and redirection)\n"
"that you already know and love. In this three-part series, Daniel Robbins will\n"
"teach you how to program in bash by example. He'll cover the absolute basics\n"
"(making this an excellent series for beginners) and bring in more advanced\n"
"features as the series proceeds.\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/bash-by-example-p1.xml:31
#, no-wrap
msgid "Fundamental programming in the Bourne again shell (bash)"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:33
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:37
#, no-wrap
msgid ""
"You might wonder why you ought to learn Bash programming. Well, here are a\n"
"couple of compelling reasons:\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:44
#, no-wrap
msgid "You're already running it"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:48
#, no-wrap
msgid ""
"If you check, you'll probably find that you are running bash right now. Even if\n"
"you changed your default shell, bash is probably still running somewhere on your\n"
"system, because it's the standard Linux shell and is used for a variety of\n"
"purposes. Because bash is already running, any additional bash scripts that you\n"
"run are inherently memory-efficient because they share memory with any\n"
"already-running bash processes. Why load a 500K interpreter if you already are\n"
"running something that will do the job, and do it well?\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:60
#, no-wrap
msgid "You're already using it"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:64
#, no-wrap
msgid ""
"Not only are you already running bash, but you're actually interacting with bash\n"
"on a daily basis. It's always there, so it makes sense to learn how to use it to\n"
"its fullest potential. Doing so will make your bash experience more fun and\n"
"productive. But why should you learn bash programming? Easy, because you already\n"
"think in terms of running commands, CPing files, and piping and redirecting\n"
"output. Shouldn't you learn a language that allows you to use and build upon\n"
"these powerful time-saving constructs you already know how to use? Command\n"
"shells unlock the potential of a UNIX system, and bash is the Linux shell. It's\n"
"the high-level glue between you and the machine. Grow in your knowledge of bash,\n"
"and you'll automatically increase your productivity under Linux and UNIX -- it's\n"
"that simple.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:80
#, no-wrap
msgid "Bash confusion"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:84
#, no-wrap
msgid ""
"Learning bash the wrong way can be a very confusing process. Many newbies type\n"
"<c>man bash</c> to view the bash man page, only to be confronted with a very\n"
"terse and technical description of shell functionality. Others type <c>info\n"
"bash</c> (to view the GNU info documentation), causing either the man page to be\n"
"redisplayed, or (if they are lucky) only slightly more friendly info\n"
"documentation to appear.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:93
#, no-wrap
msgid ""
"While this may be somewhat disappointing to novices, the standard bash\n"
"documentation can't be all things to all people, and caters towards those\n"
"already familiar with shell programming in general. There's definitely a lot of\n"
"excellent technical information in the man page, but its helpfulness to\n"
"beginners is limited.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:101
#, no-wrap
msgid ""
"That's where this series comes in. In it, I'll show you how to actually use bash\n"
"programming constructs, so that you will be able to write your own scripts.\n"
"Instead of technical descriptions, I'll provide you with explanations in plain\n"
"English, so that you will know not only what something does, but when you should\n"
"actually use it. By the end of this three-part series, you'll be able to write\n"
"your own intricate bash scripts, and be at the level where you can comfortably\n"
"use bash and supplement your knowledge by reading (and understanding!) the\n"
"standard bash documentation. Let's begin.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:114
#, no-wrap
msgid "Environment variables"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:118
#, no-wrap
msgid ""
"Under bash and almost all other shells, the user can define environment\n"
"variables, which are stored internally as ASCII strings. One of the handiest\n"
"things about environment variables is that they are a standard part of the UNIX\n"
"process model. This means that environment variables not only are exclusive to\n"
"shell scripts, but can be used by standard compiled programs as well. When we\n"
"\"export\" an environment variable under bash, any subsequent program that we run\n"
"can read our setting, whether it is a shell script or not. A good example is the\n"
"<c>vipw</c> command, which normally allows root to edit the system password\n"
"file. By setting the <c>EDITOR</c> environment variable to the name of your\n"
"favorite text editor, you can configure vipw to use it instead of vi, a handy\n"
"thing if you are used to xemacs and really dislike vi.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:132
#, no-wrap
msgid "The standard way to define an environment variable under bash is:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:135
#, no-wrap
msgid "Defining environment variable"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:136
#, no-wrap
msgid "$ <i>myvar='This is my environment variable!'</i>\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:140
#, no-wrap
msgid ""
"The above command defined an environment variable called \"myvar\" and contains\n"
"the string \"This is my environment variable!\". There are several things to\n"
"notice above: first, there is no space on either side of the \"=\" sign; any space\n"
"will result in an error (try it and see). The second thing to notice is that\n"
"while we could have done away with the quotes if we were defining a single word,\n"
"they are necessary when the value of the environment variable is more than a\n"
"single word (contains spaces or tabs).\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><note>
#: en/articles/bash-by-example-p1.xml:150
#, no-wrap
msgid ""
"For extremely detailed information on how quotes should be used in bash, you may\n"
"want to look at the \"QUOTING\" section in the bash man page. The existence of\n"
"special character sequences that get \"expanded\" (replaced) with other values\n"
"does complicate how strings are handled in bash. We will just cover the most\n"
"often-used quoting functionality in this series.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:158
#, no-wrap
msgid ""
"Thirdly, while we can normally use double quotes instead of single quotes, doing\n"
"so in the above example would have caused an error. Why? Because using single\n"
"quotes disables a bash feature called expansion, where special characters and\n"
"sequences of characters are replaced with values. For example, the \"!\" character\n"
"is the history expansion character, which bash normally replaces with a\n"
"previously-typed command. (We won't be covering history expansion in this series\n"
"of articles, because it is not frequently used in bash programming. For more\n"
"information on it, see the \"HISTORY EXPANSION\" section in the bash man page.)\n"
"While this macro-like functionality can come in handy, right now we want a\n"
"literal exclamation point at the end of our environment variable, rather than a\n"
"macro.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:172
#, no-wrap
msgid ""
"Now, let's take a look at how one actually uses environment variables. Here's an\n"
"example:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:176
#, no-wrap
msgid "Using environment variables"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:177
#, no-wrap
msgid ""
"$ <i>echo $myvar</i>\n"
"This is my environment variable!\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:182
#, no-wrap
msgid ""
"By preceding the name of our environment variable with a $, we can cause bash to\n"
"replace it with the value of myvar. In bash terminology, this is called\n"
"\"variable expansion\". But, what if we try the following:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:187
#, no-wrap
msgid "First try to use variable expansion"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:188
#, no-wrap
msgid ""
"$ <i>echo foo$myvarbar</i>\n"
"foo\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:193
#, no-wrap
msgid ""
"We wanted this to echo \"fooThis is my environment variable!bar\", but it didn't\n"
"work. What went wrong? In a nutshell, bash's variable expansion facility in got\n"
"confused. It couldn't tell whether we wanted to expand the variable $m, $my,\n"
"$myvar, $myvarbar, etc. How can we be more explicit and clearly tell bash what\n"
"variable we are referring to? Try this:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:200
#, no-wrap
msgid "Proper variable expansion"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:201
#, no-wrap
msgid ""
"$ <i>echo foo${myvar}bar</i>\n"
"fooThis is my environment variable!bar\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:206
#, no-wrap
msgid ""
"As you can see, we can enclose the environment variable name in curly braces\n"
"when it is not clearly separated from the surrounding text. While $myvar is\n"
"faster to type and will work most of the time, ${myvar} can be parsed correctly\n"
"in almost any situation. Other than that, they both do the same thing, and you\n"
"will see both forms of variable expansion in the rest of this series. You'll\n"
"want to remember to use the more explicit curly-brace form when your environment\n"
"variable is not isolated from the surrounding text by whitespace (spaces or\n"
"tabs).\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:217
#, no-wrap
msgid ""
"Recall that we also mentioned that we can \"export\" variables. When we export an\n"
"environment variable, it's automatically available in the environment of any\n"
"subsequently-run script or executable. Shell scripts can \"get to\" the\n"
"environment variable using that shell's built-in environment-variable support,\n"
"while C programs can use the getenv() function call. Here's some example C code\n"
"that you should type in and compile -- it'll allow us to understand environment\n"
"variables from the perspective of C:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:226
#, no-wrap
msgid "myvar.c -- a sample environment variable C program"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:227
#, no-wrap
msgid ""
"#include &lt;stdio.h&gt;\n"
"#include &lt;stdlib.h&gt;\n"
"\n"
"int main(void) {\n"
"  char *myenvvar=getenv(\"EDITOR\");\n"
"  printf(\"The editor environment variable is set to %s\\n\",myenvvar);\n"
"}\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:237
#, no-wrap
msgid ""
"Save the above source into a file called <path>myenv.c</path>, and then compile\n"
"it by issuing the command:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:241
#, no-wrap
msgid "Compiling the above source"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:242
#, no-wrap
msgid "$ <i>gcc myenv.c -o myenv</i>\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:246
#, no-wrap
msgid ""
"Now, there will be an executable program in your directory that, when run, will\n"
"print the value of the <c>EDITOR</c> environment variable, if any. This is what\n"
"happens when I run it on my machine:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:251
#, no-wrap
msgid "Running the above program"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:252
#, no-wrap
msgid ""
"$ <i>./myenv</i>\n"
"The editor environment variable is set to (null)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:257
#, no-wrap
msgid ""
"Hmmm... because the <c>EDITOR</c> environment variable was not set to anything,\n"
"the C program gets a null string. Let's try setting it to a specific value:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:261
#, no-wrap
msgid "Trying it with a specific value"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:262
#, no-wrap
msgid ""
"$ <i>EDITOR=xemacs</i>\n"
"$ <i>./myenv</i>\n"
"The editor environment variable is set to (null)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:268
#, no-wrap
msgid ""
"While you might have expected myenv to print the value \"xemacs\", it didn't quite\n"
"work, because we didn't export the <c>EDITOR</c> environment variable. This\n"
"time, we'll get it working:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:273
#, no-wrap
msgid "Same program after exporting variable"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:274
#, no-wrap
msgid ""
"$ <i>export EDITOR</i>\n"
"$ <i>./myenv</i>\n"
"The editor environment variable is set to xemacs\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:280
#, no-wrap
msgid ""
"So, you have seen with your very own eyes that another process (in this case our\n"
"example C program) cannot see the environment variable until it is exported.\n"
"Incidentally, if you want, you can define and export an environment variable\n"
"using one line, as follows:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:286
#, no-wrap
msgid "Defining and exporting an environment variable in one command"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:287
#, no-wrap
msgid "$ <i>export EDITOR=xemacs</i>\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:291
#, no-wrap
msgid ""
"It works identically to the two-line version. This would be a good time to show\n"
"how to erase an environment variable by using <c>unset</c>:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:295
#, no-wrap
msgid "Unsetting the variable"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:296
#, no-wrap
msgid ""
"$ <i>unset EDITOR</i>\n"
"$ <i>./myenv</i>\n"
"The editor environment variable is set to (null)\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:304
#, no-wrap
msgid "Chopping strings overview"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:308
#, no-wrap
msgid ""
"Chopping strings -- that is, splitting an original string into smaller, separate\n"
"chunk(s) -- is one of those tasks that is performed daily by your average shell\n"
"script. Many times, shell scripts need to take a fully-qualified path, and find\n"
"the terminating file or directory. While it's possible (and fun!) to code this\n"
"in bash, the standard <c>basename</c> UNIX executable performs this extremely\n"
"well:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:316
#, no-wrap
msgid "Using basename"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:317
#, no-wrap
msgid ""
"$ <i>basename /usr/local/share/doc/foo/foo.txt</i>\n"
"foo.txt\n"
"$ <i>basename /usr/home/drobbins</i>\n"
"drobbins\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:324
#, no-wrap
msgid ""
"<c>basename</c> is quite a handy tool for chopping up strings. It's companion, called\n"
"<c>dirname</c>, returns the \"other\" part of the path that <c>basename</c> throws\n"
"away:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:329
#, no-wrap
msgid "Using dirname"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:330
#, no-wrap
msgid ""
"$ <i>dirname /usr/local/share/doc/foo/foo.txt</i>\n"
"/usr/local/share/doc/foo\n"
"$ <i>dirname /usr/home/drobbins/</i>\n"
"/usr/home\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><note>
#: en/articles/bash-by-example-p1.xml:337
#, no-wrap
msgid ""
"Both <c>dirname</c> and <c>basename</c> do not look at any files or directories\n"
"on disk; they are purely string manipulation commands.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:344
#, no-wrap
msgid "Command substitution"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:348
#, no-wrap
msgid ""
"One very handy thing to know is how to create an environment variable that\n"
"contains the result of an executable command. This is very easy to do:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:352
#, no-wrap
msgid "Creating an environment variable containing command result"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:353
#, no-wrap
msgid ""
"$ <i>MYDIR=`dirname /usr/local/share/doc/foo/foo.txt`</i>\n"
"$ <i>echo $MYDIR</i>\n"
"/usr/local/share/doc/foo\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:359
#, no-wrap
msgid ""
"What we did above is called <e>command substitution</e>. Several things are worth\n"
"noticing in this example. On the first line, we simply enclosed the command we\n"
"wanted to execute in back quotes. Those are not standard single quotes, but\n"
"instead come from the keyboard key that normally sits above the Tab key. We can\n"
"do exactly the same thing with bash's alternate command substitution syntax:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:366
#, no-wrap
msgid "Alternate command substitution syntax"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:367
#, no-wrap
msgid ""
"$ <i>MYDIR=$(dirname /usr/local/share/doc/foo/foo.txt)</i>\n"
"$ <i>echo $MYDIR</i>\n"
"/usr/local/share/doc/foo\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:373
#, no-wrap
msgid ""
"As you can see, bash provides multiple ways to perform exactly the same thing.\n"
"Using command substitution, we can place any command or pipeline of commands in\n"
"between <e>` `</e> or <e>$( )</e> and assign it to an environment variable.\n"
"Handy stuff!  Here's an example of how to use a pipeline with command\n"
"substitution:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:380
#, no-wrap
msgid "Pipeline command substitution"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:381
#, no-wrap
msgid ""
"$ <i>MYFILES=$(ls /etc | grep pa)</i>\n"
"$ <i>echo $MYFILES</i>\n"
"pam.d passwd\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:389
#, no-wrap
msgid "Chopping strings like a pro"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:393
#, no-wrap
msgid ""
"While <c>basename</c> and <c>dirname</c> are great tools, there are times where\n"
"we may need to perform more advanced string \"chopping\" operations than just\n"
"standard pathname manipulations. When we need more punch, we can take advantage\n"
"of bash's advanced built-in variable expansion functionality. We've already used\n"
"the standard kind of variable expansion, which looks like this: ${MYVAR}. But\n"
"bash can also perform some handy string chopping on its own. Take a look at\n"
"these examples:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:402
#, no-wrap
msgid "Examples of strings chopping"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:403
#, no-wrap
msgid ""
"$ <i>MYVAR=foodforthought.jpg</i>\n"
"$ <i>echo ${MYVAR##*fo}</i>\n"
"rthought.jpg\n"
"$ <i>echo ${MYVAR#*fo}</i>\n"
"odforthought.jpg\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:411
#, no-wrap
msgid ""
"In the first example, we typed ${MYVAR##*fo}. What exactly does this mean?\n"
"Basically, inside the ${ }, we typed the name of the environment variable, two\n"
"##s, and a wildcard (\"*fo\"). Then, bash took <c>MYVAR</c>, found the longest substring\n"
"from the beginning of the string \"foodforthought.jpg\" that matched the wildcard\n"
"\"*fo\", and chopped it off the beginning of the string. That's a bit hard to\n"
"grasp at first, so to get a feel for how this special \"##\" option works, let's\n"
"step through how bash completed this expansion. First, it began searching for\n"
"substrings at the beginning of \"foodforthought.jpg\" that matched the \"*fo\"\n"
"wildcard. Here are the substrings that it checked:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:422
#, no-wrap
msgid "Substrings being checked"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:423
#, no-wrap
msgid ""
"f       \n"
"fo              MATCHES *fo\n"
"foo     \n"
"food\n"
"foodf           \n"
"foodfo          MATCHES *fo\n"
"foodfor\n"
"foodfort        \n"
"foodforth\n"
"foodfortho      \n"
"foodforthou\n"
"foodforthoug\n"
"foodforthought\n"
"foodforthought.j\n"
"foodforthought.jp\n"
"foodforthought.jpg\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:442
#, no-wrap
msgid ""
"After searching the string for matches, you can see that bash found two. It\n"
"selects the longest match, removes it from the beginning of the original string,\n"
"and returns the result.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:448
#, no-wrap
msgid ""
"The second form of variable expansion shown above appears identical to the\n"
"first, except it uses only one \"#\" -- and bash performs an almost identical\n"
"process. It checks the same set of substrings as our first example did, except\n"
"that bash removes the shortest match from our original string, and returns the\n"
"result. So, as soon as it checks the \"fo\" substring, it removes \"fo\" from our\n"
"string and returns \"odforthought.jpg\".\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:457
#, no-wrap
msgid ""
"This may seem extremely cryptic, so I'll show you an easy way to remember this\n"
"functionality. When searching for the longest match, use ## (because ## is\n"
"longer than #). When searching for the shortest match, use #. See, not that hard\n"
"to remember at all! Wait, how do you remember that we are supposed to use the\n"
"'#' character to remove from the *beginning* of a string? Simple! You will\n"
"notice that on a US keyboard, shift-4 is \"$\", which is the bash variable\n"
"expansion character. On the keyboard, immediately to the left of \"$\" is \"#\". So,\n"
"you can see that \"#\" is \"at the beginning\" of \"$\", and thus (according to our\n"
"mnemonic), \"#\" removes characters from the beginning of the string. You may\n"
"wonder how we remove characters from the end of the string. If you guessed that\n"
"we use the character immediately to the right of \"$\" on the US keyboard (\"%\"),\n"
"you're right! Here are some quick examples of how to chop off trailing portions\n"
"of strings:\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:473
#, no-wrap
msgid ""
"$ <i>MYFOO=\"chickensoup.tar.gz\"</i>\n"
"$ <i>echo ${MYFOO%%.*}</i>\n"
"chickensoup\n"
"$ <i>echo ${MYFOO%.*}</i>\n"
"chickensoup.tar\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:481
#, no-wrap
msgid ""
"As you can see, the % and %% variable expansion options work identically to #\n"
"and ##, except they remove the matching wildcard from the end of the string.\n"
"Note that you don't have to use the \"*\" character if you wish to remove a\n"
"specific substring from the end:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:487
#, no-wrap
msgid "Removing substrings from the end"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:488
#, no-wrap
msgid ""
"<i>MYFOOD=\"chickensoup\"</i>\n"
"$ <i>echo ${MYFOOD%%soup}</i>\n"
"chicken\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:494
#, no-wrap
msgid ""
"In this example, it doesn't matter whether we use \"%%\" or \"%\", since only one\n"
"match is possible. And remember, if you forget whether to use \"#\" or \"%\", look\n"
"at the 3, 4, and 5 keys on your keyboard and figure it out.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:500
#, no-wrap
msgid ""
"We can use another form of variable expansion to select a specific substring,\n"
"based on a specific character offset and length. Try typing in the following\n"
"lines under bash:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:505
#, no-wrap
msgid "Selecting a specific substring"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:506
#, no-wrap
msgid ""
"$ <i>EXCLAIM=cowabunga</i>\n"
"$ <i>echo ${EXCLAIM:0:3}</i>\n"
"cow\n"
"$ <i>echo ${EXCLAIM:3:7}</i>\n"
"abunga\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:514
#, no-wrap
msgid ""
"This form of string chopping can come in quite handy; simply specify the\n"
"character to start from and the length of the substring, all separated by\n"
"colons.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:522
#, no-wrap
msgid "Applying string chopping"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:526
#, no-wrap
msgid ""
"Now that we've learned all about chopping strings, let's write a simple little\n"
"shell script. Our script will accept a single file as an argument, and will\n"
"print out whether it appears to be a tarball. To determine if it is a tarball,\n"
"it will look for the pattern \".tar\" at the end of the file. Here it is:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:532
#, no-wrap
msgid "mytar.sh -- a sample script"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:533
#, no-wrap
msgid ""
"#!/bin/bash\n"
"\n"
"if [ \"${1##*.}\" = \"tar\" ]\n"
"then\n"
"       echo This appears to be a tarball.\n"
"else\n"
"       echo At first glance, this does not appear to be a tarball.\n"
"fi\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:544
#, no-wrap
msgid ""
"To run this script, enter it into a file called <path>mytar.sh</path>, and type\n"
"<c>chmod 755 mytar.sh</c> to make it executable. Then, give it a try on a\n"
"tarball, as follows:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:549
#, no-wrap
msgid "Trying the script"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:550
#, no-wrap
msgid ""
"$ <i>./mytar.sh thisfile.tar</i>\n"
"This appears to be a tarball.\n"
"$ <i>./mytar.sh thatfile.gz</i>\n"
"At first glance, this does not appear to be a tarball.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:557
#, no-wrap
msgid ""
"OK, it works, but it's not very functional. Before we make it more useful, let's\n"
"take a look at the \"if\" statement used above. In it, we have a boolean\n"
"expression. In bash, the \"=\" comparison operator checks for string equality. In\n"
"bash, all boolean expressions are enclosed in square brackets. But what does the\n"
"boolean expression actually test for? Let's take a look at the left side.\n"
"According to what we've learned about string chopping, \"${1##*.}\" will remove\n"
"the longest match of \"*.\" from the beginning of the string contained in the\n"
"environment variable \"1\", returning the result. This will cause everything after\n"
"the last \".\" in the file to be returned. Obviously, if the file ends in \".tar\",\n"
"we will get \"tar\" as a result, and the condition will be true.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:570
#, no-wrap
msgid ""
"You may be wondering what the \"1\" environment variable is in the first place.\n"
"Very simple -- $1 is the first command-line argument to the script, $2 is the\n"
"second, etc. OK, now that we've reviewed the function, we can take our first\n"
"look at \"if\" statements.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:579
#, no-wrap
msgid "If statements"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:583
#, no-wrap
msgid ""
"Like most languages, bash has its own form of conditional. When using them,\n"
"stick to the format above; that is, keep the \"if\" and the \"then\" on separate\n"
"lines, and keep the \"else\" and the terminating and required \"fi\" in horizontal\n"
"alignment with them. This makes the code easier to read and debug. In addition\n"
"to the \"if,else\" form, there are several other forms of \"if\" statements:\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:590
#, no-wrap
msgid "Basic form of if statement"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:591
#, no-wrap
msgid ""
"if      [ condition ]\n"
"then\n"
"        action\n"
"fi\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:598
#, no-wrap
msgid ""
"This one performs an action only if condition is true, otherwise it performs no\n"
"action and continues executing any lines following the \"fi\".\n"
msgstr ""

#. type: Attribute 'caption' of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:602
#, no-wrap
msgid "Checking condition before continuing with commands following fi"
msgstr ""

#. type: Content of: <guide><chapter><section><body><pre>
#: en/articles/bash-by-example-p1.xml:603
#, no-wrap
msgid ""
"if [ condition ]\n"
"then \n"
"        action\n"
"elif [ condition2 ]\n"
"then\n"
"        action2\n"
".\n"
".\n"
".\n"
"elif [ condition3 ]\n"
"then\n"
"\n"
"else\n"
"        actionx\n"
"fi\n"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:621
#, no-wrap
msgid ""
"The above \"elif\" form will consecutively test each condition and execute the\n"
"action corresponding to the first true condition. If none of the conditions are\n"
"true, it will execute the \"else\" action, if one is present, and then continue\n"
"executing lines following the entire \"if,elif,else\" statement.\n"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:630
#, no-wrap
msgid "Next time"
msgstr ""

#. type: Content of: <guide><chapter><section><body><p>
#: en/articles/bash-by-example-p1.xml:634
#, no-wrap
msgid ""
"Now that we've covered the most basic bash functionality, it's time to pick up\n"
"the pace and get ready to write some real scripts. In the next article, I'll\n"
"cover looping constructs, functions, namespace, and other essential topics.\n"
"Then, we'll be ready to write some more complicated scripts. In the third\n"
"article, we'll focus almost exclusively on very complex scripts and functions,\n"
"as well as several bash script design options. See you then!\n"
msgstr ""

#. type: Content of: <guide><chapter><title>
#: en/articles/bash-by-example-p1.xml:647
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Content of: <guide><chapter><section><title>
#: en/articles/bash-by-example-p1.xml:649
#, no-wrap
msgid "Useful links"
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/bash-by-example-p1.xml:654
#, no-wrap
msgid ""
"    Read <uri\n"
"    link=\"http://www.gentoo.org/doc/en/articles/bash-by-example-p2.xml\">Bash by\n"
"    example: Part 2</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/bash-by-example-p1.xml:659
#, no-wrap
msgid ""
"    Read <uri\n"
"    link=\"http://www.gentoo.org/doc/en/articles/bash-by-example-p3.xml\">Bash by\n"
"    example: Part 3</uri>.\n"
"  "
msgstr ""

#. type: Content of: <guide><chapter><section><body><ul><li>
#: en/articles/bash-by-example-p1.xml:664
#, no-wrap
msgid ""
"    Visit <uri link=\"http://www.gnu.org/software/bash/bash.html\">GNU's bash home\n"
"    page</uri>\n"
"  "
msgstr ""
